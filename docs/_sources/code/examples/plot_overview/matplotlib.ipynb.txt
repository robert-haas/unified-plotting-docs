{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plots with Matplotlib\n",
    "\n",
    "This [Jupyter notebook](https://jupyter.org) provides an overview of all plotting functions of [unified-plotting](https://pypi.org/project/unified-plotting) that are available in the subpackage `unified_plotting.matplotlib`. As the name indicates, they use [Matplotlib](https://matplotlib.org) to create visualizations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dataset 1: Numerical vector data\n",
    "\n",
    "The following is a vector data set consisting of six vectors with the names ``u`` to ``z``. Each vector has ``n=100`` entries that are generated by repeatedly drawing random numbers from some distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "random.seed(42)\n",
    "\n",
    "n = 100\n",
    "u = [random.gauss(mu=0, sigma=1) for i in range(n)]\n",
    "v = [2.0 + 3.0*val + 2.0*random.gauss(mu=0, sigma=1) for val in u]\n",
    "w = [val1 - 1.5*val2 + random.gauss(mu=0.2, sigma=0.5) for val1, val2 in zip(u, v)]\n",
    "x = [random.lognormvariate(mu=0, sigma=1) for i in range(n)]\n",
    "y = [random.expovariate(lambd=0.5) for i in range(n)]\n",
    "z = [random.paretovariate(alpha=2.0) for i in range(n)]\n",
    "\n",
    "variable_names = ['u: normal 1', 'v: normal 2', 'w: normal 3', 'x: log normal', 'y: exponential', 'z: pareto']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2-dimensional plots\n",
    "\n",
    "The following shows plotting functions that accept two vectors via the arguments ``x`` and ``y``, as well as some optional arguments to modify plot appearance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.hexbin(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    colormap='svc.green1',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "up.matplotlib.histogram_2d(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    colormap='svc.blue1',\n",
    "    bin_x_number=15,\n",
    "    bin_y_number=15,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.scatter(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "up.matplotlib.scatter(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    y_error_top=[element/10.0 for element in z],\n",
    "    y_error_bottom=[0.2]*len(y),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.scatter(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    x_error_left=[element/30.0 for element in z],\n",
    "    x_error_right=[0.2]*len(y),\n",
    "    x_error_bar_color='black',\n",
    "    x_error_bar_line_width=0.3,\n",
    "    x_error_bar_size=1.5,\n",
    "    y_error_top=[element/30.0 for element in z],\n",
    "    y_error_bottom=[0.2]*len(y),\n",
    "    y_error_bar_color='black',\n",
    "    y_error_bar_line_width=0.3,\n",
    "    y_error_bar_size=1.5,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.scatter(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    marker_style='x',\n",
    "    marker_color='black',\n",
    "    marker_size=5,\n",
    "    show_line=True,\n",
    "    line_style='.',\n",
    "    line_color='#00a',\n",
    "    line_width=0.5,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.scatter(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    color=u,\n",
    "    marker_style='d',\n",
    "    x_tick_position=[-0.7, 0.7],\n",
    "    x_label=['Transition 1', 'Transition 2'],\n",
    "    show_x_grid=True,\n",
    "    x_grid_color='black',\n",
    "    x_grid_width=1.25,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.scatter(\n",
    "    x=[u, u, u],\n",
    "    y=[v, w, x],\n",
    "    name=['var v', 'var w', 'var x'],\n",
    "    x_title='var u',\n",
    "    show_y_title=False,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "up.matplotlib.scatter(\n",
    "    x=[u, u, u],\n",
    "    y=[v, w, x],\n",
    "    name=['var v', 'var w', 'var x'],\n",
    "    x_title='var x',\n",
    "    show_y_title=False,\n",
    "    show_line=True,\n",
    "    marker_style=['>', '<', '^'],\n",
    "    marker_size=[3, 4, 5],\n",
    "    line_style=['-', '--', '.'],\n",
    "    line_width=[0.3, 0.7, 1.1],\n",
    "    x_axis_range=[-5, +5],\n",
    "    y_axis_range=[-30, +30],\n",
    "    x_tick_position=range(-5, 5+1, 1),\n",
    "    y_tick_position=range(-30, +30+1, 5),\n",
    "    line_opacity=0.5, #[1.0, 0.5, 0.25],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.scatter(\n",
    "    x=[u, u, u],\n",
    "    y=[v, w, x],\n",
    "    name=['var v', 'var w', 'var x'],\n",
    "    x_title='var u',\n",
    "    show_y_title=False,\n",
    "    color=[u, 'black', 'gray'],\n",
    "    marker_style=['s', 'x', '+'],\n",
    "    marker_size=[6, 3.5, 3.5],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3-dimensional plots\n",
    "\n",
    "The following shows plotting functions that accept three vectors via the arguments ``x``, ``y`` and ``z``, as well as some optional arguments to modify plot appearance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.contour(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    z=y,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.contour(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    z=y,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    colormap='spectral',\n",
    "    colormap_reversed=True,\n",
    "    interpolation_method='allrounder_nearest',\n",
    "    interpolation_num_x_gridpoints=20,\n",
    "    interpolation_num_y_gridpoints=20,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "up.matplotlib.scatter_3d(\n",
    "    x=x,\n",
    "    y=y,\n",
    "    z=z,\n",
    "    x_title='var x',\n",
    "    y_title='var y',\n",
    "    z_title='var z',\n",
    "    show_x_grid=True,\n",
    "    show_y_grid=True,\n",
    "    show_z_grid=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.scatter_3d(\n",
    "    x=[u, u, u, u],\n",
    "    y=[v, v, v, v],\n",
    "    z=[w, x, y, z],\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    name=['var w', 'var x', 'var y', 'var z'],\n",
    "    show_z_title=False,\n",
    "    show_x_grid=True,\n",
    "    show_y_grid=True,\n",
    "    show_z_grid=True,\n",
    "    marker_size=5,\n",
    "    marker_style=['o', 's', 'x', 'd'],\n",
    "    camera_angle_vertical=30,\n",
    "    camera_angle_horizontal=15,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### n-dimensional plots\n",
    "\n",
    "The following shows plotting functions that accept n vectors via the argument ``data``, as well as some optional arguments to modify plot appearance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "up.matplotlib.box(\n",
    "    data=[u, v, w, x, y, z],\n",
    "    name=variable_names,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.box(\n",
    "    data=[u, v, w, x, y, z],\n",
    "    name=variable_names,\n",
    "    color=['#a6cee3', '#1f78b4', '#b2df8a'],\n",
    "    opacity=0.8,\n",
    "    orientation='horizontal',\n",
    "    show_mean=True,\n",
    "    show_notch=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.histogram(\n",
    "    data=[u, v, w],\n",
    "    name=variable_names,\n",
    "    x_title='Value',\n",
    "    y_title='Count',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.histogram(\n",
    "    data=[u, v, w],\n",
    "    name=variable_names,\n",
    "    x_title='Count',\n",
    "    y_title='Value',\n",
    "    color=['xkcd.blueberry', 'xkcd.strawberry', 'xkcd.apple'],\n",
    "    opacity=0.75,\n",
    "    orientation='horizontal',\n",
    "    bar_mode='stack',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "up.matplotlib.scatter_matrix(\n",
    "    data=[u, v, w, x, y, z],\n",
    "    name=variable_names,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.scatter_matrix(\n",
    "    data=[u, v, w, x, y, z],\n",
    "    name=variable_names,\n",
    "    color=u,\n",
    "    colormap='cmr.iceburn',\n",
    "    marker_size=2.5,\n",
    "    marker_style='d',\n",
    "    marker_opacity=0.5,\n",
    "    show_upper=False,\n",
    ")   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.violin(\n",
    "    data=[u, v, w, x, y, z],\n",
    "    name=variable_names,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.violin(\n",
    "    data=[u, v, w, x, y, z],\n",
    "    name=variable_names,\n",
    "    color=['#005824', '#41ae76', '#99d8c9'],\n",
    "    opacity=0.8,\n",
    "    violin_width=0.85,\n",
    "    orientation='horizontal',\n",
    "    show_mean=True,\n",
    "    show_median=True,\n",
    "    show_extrema=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot combinations\n",
    "\n",
    "The following shows how to combine different plotting functions by providing the first figure to the next plotting function. (Currently it is not possible to support a simple plus operator between figure objects as in the case of Plotly, due to limited flexibility of Matplotlib.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig1 = up.matplotlib.hexbin(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    colormap='svc.green1',\n",
    ")\n",
    "\n",
    "fig2 = up.matplotlib.scatter(\n",
    "    fig=fig1,  # meaning: plot on top of fig1 (into its first axis object if not specified explicitely)\n",
    "    x=u,\n",
    "    y=v,\n",
    "    marker_color='lightgray',\n",
    "    marker_style='x',\n",
    ")\n",
    "\n",
    "fig2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig1 = up.matplotlib.histogram_2d(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    colormap='svc.blue1',\n",
    "    bin_x_number=15,\n",
    "    bin_y_number=15,\n",
    ")\n",
    "\n",
    "fig2 = up.matplotlib.scatter(\n",
    "    fig=fig1,\n",
    "    x=u,\n",
    "    y=v,\n",
    "    marker_color='lightgray',\n",
    "    marker_style='square',\n",
    "    marker_size=3,\n",
    ")\n",
    "\n",
    "fig2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig1 = up.matplotlib.contour(\n",
    "    x=u,\n",
    "    y=v,\n",
    "    z=y,\n",
    "    x_title='var u',\n",
    "    y_title='var v',\n",
    "    colormap='cmo.curl'\n",
    ")\n",
    "\n",
    "fig2 = up.matplotlib.scatter(\n",
    "    fig=fig1,\n",
    "    x=u,\n",
    "    y=v,\n",
    "    marker_color='lightgray',\n",
    "    marker_style='+',\n",
    ")\n",
    "\n",
    "fig2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig1 = up.matplotlib.box(\n",
    "    data=[u, v, w, x, y, z],\n",
    "    name=variable_names,\n",
    "    opacity=0.8,\n",
    "    show_mean=True,\n",
    ")\n",
    "\n",
    "fig2 = up.matplotlib.violin(\n",
    "    fig=fig1,\n",
    "    data=[u, v, w, x, y, z],\n",
    "    name=variable_names,\n",
    "    opacity=0.2,\n",
    "    show_extrema=False,\n",
    "    violin_width=0.9,\n",
    ")\n",
    "\n",
    "fig2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dataset 2: Mixed vector data\n",
    "\n",
    "Both categorical and numerical vectors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2-dimensional plots (categorical)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dates1 = ['{}.1.2020'.format(i) for i in range(30)]\n",
    "dates2 = ['{}.1.2020'.format(i) for i in range(10, 32)]\n",
    "dates3 = ['{}.1.2020'.format(i) for i in range(8, 27)]\n",
    "\n",
    "up.matplotlib.scatter(\n",
    "    x=[dates1, dates2, dates3],\n",
    "    y=[x[:len(dates1)], y[:len(dates2)], z[:len(dates3)]],\n",
    "    name=['var x', 'var y', 'var z'],\n",
    "    show_line=True,\n",
    "    \n",
    "    x_title='Date',\n",
    "    x_axis_scale='cat',\n",
    "    x_label_rotation=55,\n",
    "    \n",
    "    y_title='Amount',\n",
    "    y_axis_scale='log',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3-dimensional plots (categorical)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n",
    "people = ['John', 'Jane', 'Rick']\n",
    "johns_hours = [4, 5, 1, 0, 2, 5, 7]\n",
    "janes_hours = [7, 8, 0, 1, 2, 6, 5]\n",
    "ricks_hours = [6, 7, 0, 1, 1, 4, 7]\n",
    "\n",
    "up.matplotlib.contour(\n",
    "    x=days,\n",
    "    y=people,\n",
    "    z=[johns_hours, janes_hours, ricks_hours],\n",
    "    x_axis_scale='categorical',\n",
    "    y_axis_scale='cat',\n",
    "    colormap='viridis',\n",
    "    x_label_rotation=40,\n",
    "    show_x_title=False,\n",
    "    show_y_title=False,\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
