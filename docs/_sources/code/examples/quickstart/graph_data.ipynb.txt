{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Graph data\n",
    "\n",
    "This [Jupyter notebook](https://jupyter.org) provides a quickstart example of plotting graph data with [unified-plotting](https://pypi.org/project/unified-plotting). Advanced features can be found in further notebooks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the package"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define some graph data\n",
    "\n",
    "Graph data can be represented in many ways. This package provides a [format specification](../../../rst/format_specifications.rst#json-graph-format-jgf) that defines the data structure accepted by functions in unified-plotting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {\n",
    "  \"graph\": {\n",
    "    \"directed\": True,\n",
    "    \"metadata\": {\n",
    "        \"node_color\": \"lightgreen\",\n",
    "        \"node_label_color\": \"blue\",\n",
    "    },\n",
    "    \"nodes\": [\n",
    "      {\"id\": \"1\"},\n",
    "      {\"id\": \"2\"},\n",
    "      {\"id\": \"3\"},\n",
    "      {\"id\": \"4\", \"metadata\": {\n",
    "          \"color\": \"magenta\", \"size\": 20, \"label_color\": \"darkviolet\", \"label_size\": 18}},\n",
    "      {\"id\": \"5\"},\n",
    "      {\"id\": \"6\"},\n",
    "      {\"id\": \"7\"},\n",
    "      {\"id\": \"8\", \"metadata\": {\n",
    "          \"color\": \"magenta\", \"size\": 20, \"label_color\": \"darkviolet\", \"label_size\": 18}},\n",
    "      {\"id\": \"9\"}\n",
    "    ],\n",
    "    \"edges\": [\n",
    "      {\"source\": \"1\", \"target\": \"2\"},\n",
    "      {\"source\": \"2\", \"target\": \"3\"},\n",
    "      {\"source\": \"3\", \"target\": \"1\"},\n",
    "      {\"source\": \"3\", \"target\": \"4\", \"metadata\": {\"size\": 3, \"color\": \"#9911ee\"}},\n",
    "      {\"source\": \"2\", \"target\": \"4\", \"metadata\": {\"size\": 3, \"color\": \"#91e\"}},\n",
    "      {\"source\": \"4\", \"target\": \"5\", \"metadata\": {\"size\": 3, \"color\": \"darkviolet\"}},\n",
    "      {\"source\": \"5\", \"target\": \"6\"},\n",
    "      {\"source\": \"6\", \"target\": \"7\"},\n",
    "      {\"source\": \"7\", \"target\": \"5\"},\n",
    "      {\"source\": \"7\", \"target\": \"8\", \"metadata\": {\"size\": 3, \"color\": \"darkviolet\"}},\n",
    "      {\"source\": \"6\", \"target\": \"8\", \"metadata\": {\"size\": 3, \"color\": \"darkviolet\"}},\n",
    "      {\"source\": \"8\", \"target\": \"9\", \"metadata\": {\"size\": 3, \"color\": \"darkviolet\"}}\n",
    "    ]\n",
    "  }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create various plots\n",
    "\n",
    "What happens when creating a plot?\n",
    "\n",
    "1. The user provides graph data and optional arguments to a chosen plotting function.\n",
    "2. The given input is converted internally into a form that is accepted by a method from a third party JavaScript library such as d3.js, vis.js and others.\n",
    "3. The library method returns some object, which is wrapped by this package into a new figure object that has methods to display the plot (automatically in Jupyter notebook), export it in various file formats and other features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.network_d3(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.network_vis(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.network_webgl(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Use NetworkX to create a graph\n",
    "\n",
    "More information can be found in the example section on [external graph libraries](../../../rst/examples/external_graph_libraries.rst)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "\n",
    "# Create a random graph with NetworkX\n",
    "graph = nx.powerlaw_cluster_graph(n=150, m=2, p=0.97)\n",
    "\n",
    "# Assign properties\n",
    "for node_id in graph.nodes:\n",
    "    node = graph.nodes[node_id]\n",
    "    degree = graph.degree[node_id]\n",
    "    node['size'] = 5 + degree\n",
    "    node['color'] = 'red' if degree > 10 else 'black'\n",
    "    node['shape'] = 'hexagon' if degree > 10 else 'circle'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot a NetworkX graph\n",
    "\n",
    "Unified plotting can convert graph objects from different graph libraries automatically into JGF and plot it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.network_d3(graph, zoom_factor=0.35)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
