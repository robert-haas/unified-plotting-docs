{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Figure object\n",
    "\n",
    "This [Jupyter notebook](https://jupyter.org) provides a quickstart example of using the figure object that is returned by each plotting function of [unified-plotting](https://pypi.org/project/unified-plotting).\n",
    "\n",
    "The figure object provides methods to\n",
    "\n",
    "- display the plot inline in a Jupyter notebook or as standalone HTML file in a webbrowser tab\n",
    "- export the plot in various file formats such as PNG, JPEG and SVG\n",
    "- represent the plot in text formats that can be served by a webserver such as Flask or Django\n",
    "- modify the plot size, resolution and margins even after plot creation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the package"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define some vector data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vec1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n",
    "vec2 = [24, 70, 19, 77, 58, 35, 18, 31, 16, 13, 20, 89, 48, 44, 82, 53, 55, 15, 89, 98, 84, 70, 39, 37, 16]\n",
    "vec3 = [46, 27, 54, 59, 62, 69, 28, 95, 44, 35, 56, 47, 69, 0, 62, 98, 50, 24, 62, 45, 31, 63, 27, 48, 44]\n",
    "vec4 = [33, 0, 16, 32, 3, 50, 135, 27, 27, 4, 9, 65, 49, 31, 11, 43, 18, 21, 8, 7, 34, 36, 45, 29, 42]\n",
    "vec5 = [1, 2, 1, 9, 2, 3, 13, 1, 1, 47, 8, 2, 4, 25, 5, 5, 4, 1, 1, 68, 1, 1, 33, 1, 2]\n",
    "\n",
    "data = [vec1, vec2, vec3, vec4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a plot and assign the returned figure object to a variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = up.matplotlib.scatter(\n",
    "    x=vec1,\n",
    "    y=vec2,\n",
    "    marker_style='x',\n",
    "    marker_size=4,\n",
    "    show_line=True,\n",
    "    line_width=1.25,\n",
    "\n",
    "    paper_background_color='black',\n",
    "    plot_background_color='white',\n",
    "\n",
    "    x_axis_offset=1,\n",
    "    x_spine_color='black',\n",
    "    x_title_color='lightgreen',\n",
    "    x_label_color='lightgreen',\n",
    "    x_tick_color='lightgreen',\n",
    "    x_tick_length=5,\n",
    "\n",
    "    y_axis_offset=1,\n",
    "    y_spine_color='black',\n",
    "    y_title_color='orange',\n",
    "    y_label_color='orange',\n",
    "    y_tick_color='orange',\n",
    "    y_tick_length=5,\n",
    "\n",
    "    show_y_grid=True,\n",
    "    y_grid_color='black',\n",
    "    y_grid_width=0.5,\n",
    "    y_grid_style='-.',\n",
    "\n",
    "    dpi=150,\n",
    "    width_mm=160,\n",
    "    height_mm=80,\n",
    "    margin_left_mm=15,\n",
    "    margin_bottom_mm=15,\n",
    "    margin_right_mm=7,\n",
    "    margin_top_mm=7,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Display the plot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. In a Jupyter notebook by automatic call of the method `_repr_html_()` of the figure object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. In a Jupyter notebook by call of the method `display()` with the argument `inline=True`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Plot in default PNG format')\n",
    "fig.display(inline=True)\n",
    "\n",
    "print('Same plot in PDF format and with different size, dpi and margins')\n",
    "fig.set_display_format('pdf')\n",
    "fig.set_size(\n",
    "    width_mm=100, height_mm=100, dpi=72,\n",
    "    margin_left_mm=15, margin_right_mm=15, margin_top_mm=15, margin_bottom_mm=15\n",
    ")\n",
    "fig.display(inline=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. In a new browser tab by calling the method `display()` with default `inline=False` argument. This can also be used in Python scripts that are executed in a Python interpreter other than a Jupyter notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fig.display()  # result pops up as HTML site in a browser tab"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Export the plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.export_png('raster_image')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.export_svg('vector_image')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.export_html('vector_image_embedded_in_html_document')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Represent the plot as web-servable text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "html_text = fig.png_img_element\n",
    "\n",
    "print(html_text[:70], '...', html_text[-70:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Display the generated HTML text in a Jupyter notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.core.display import display, HTML\n",
    "\n",
    "display(HTML(html_text))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
