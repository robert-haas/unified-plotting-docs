{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vector data\n",
    "\n",
    "This [Jupyter notebook](https://jupyter.org) provides a quickstart example of plotting vector data with [unified-plotting](https://pypi.org/project/unified-plotting). Additional plot types and advanced features can be found in further notebooks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the package"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define some vector data\n",
    "\n",
    "What is meant by vector data?\n",
    "\n",
    "- Vector = a list of numbers or strings, where a list is either a Python list object or a similar Iterable object (e.g. tuple, Numpy array, Pandas Series).\n",
    "- Vector data = a list of vectors\n",
    "    - 2-D vector data = a list of two vectors, provided as ``x`` and ``y``\n",
    "    - 3-D vector data = a list of three vectors, provided as ``x``, ``y`` and ``z``\n",
    "    - n-D vector data = a list of n vectors, where n is an integer number from 1 upwards, provided as ``data``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vec1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n",
    "vec2 = [24, 70, 19, 77, 58, 35, 18, 31, 16, 13, 20, 89, 48, 44, 82, 53, 55, 15, 89, 98, 84, 70, 39, 37, 16]\n",
    "vec3 = [46, 27, 54, 59, 62, 69, 28, 85, 44, 35, 56, 47, 69, 0, 62, 98, 50, 24, 62, 45, 31, 63, 27, 48, 44]\n",
    "vec4 = [33, 0, 16, 32, 3, 50, 135, 27, 27, 4, 9, 65, 49, 31, 11, 43, 18, 21, 8, 7, 34, 36, 45, 29, 42]\n",
    "vec5 = [el4 + el3/2 for el3, el4 in zip(vec3, vec4)]\n",
    "\n",
    "data = [vec1, vec2, vec3, vec4, vec5]\n",
    "name = ['Vector 1', 'Vector 2', 'Vector 3', 'Vector 4', 'Vector 5']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create various plots\n",
    "\n",
    "What happens when creating a plot?\n",
    "\n",
    "1. The user provides vector data and optional arguments to a chosen plotting function.\n",
    "2. The given input is converted internally into a form that is accepted by a method from a third party library such as Matplotlib, Plotly or JavaScript (d3.js, SlickGrid, etc.).\n",
    "3. The library method returns some object, which is wrapped by this package into a new figure object that has methods to display the plot (automatically in Jupyter notebook), export it in various file formats and other features.\n",
    "\n",
    "### 2-D plots for visualizing two vectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Static scatter plot with Matplotlib\n",
    "up.matplotlib.scatter(x=vec1, y=vec2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interactive scatter plot with Plotly, including optional error bars\n",
    "up.plotly.scatter(\n",
    "    x=vec1,\n",
    "    y=vec2,\n",
    "    y_error_top=[item/10 for item in vec2],\n",
    "    y_error_bottom=[item/12 for item in vec3],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Example that demonstrates\n",
    "# a) providing optional arguments\n",
    "# b) combining figures\n",
    "fig1 = up.plotly.histogram_2d(x=vec1, y=vec2, colormap='blues', width_mm=120, height_mm=120)\n",
    "fig2 = up.plotly.scatter(x=vec1, y=vec2, color='black', show_line=True)\n",
    "fig1 + fig2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Static hexbin plot with Matplotlib\n",
    "up.matplotlib.hexbin(vec1, vec2, colormap='cet.linear_blue_95_50_c20')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interactive density plot with Plotly\n",
    "up.plotly.density_2d(vec1, vec2, colormap='cet.linear_blue_95_50_c20')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example for scatter plot with multiple pairs of two vectors, i.e. (vec1, vec2), (vec1, vec3), ...\n",
    "up.plotly.scatter(\n",
    "    x=[vec1, vec1, vec1, vec1],\n",
    "    y=[vec2, vec3, vec4, vec5],\n",
    "    name=['vec2', 'vec3', 'vec4', 'vec5'],\n",
    "    show_line=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3-D plots for visualizing three vectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Static 3D scatter plot with Matplotlib\n",
    "up.matplotlib.scatter_3d(x=vec1, y=vec2, z=vec3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interactive 3D scatter plot with Plotly and interpolated surface\n",
    "up.plotly.scatter_3d(\n",
    "    x=vec1, y=vec2, z=vec3,\n",
    "    show_interpolation_rbf=True,\n",
    "    marker_size=5,\n",
    "    marker_style='d',\n",
    "    marker_color='black',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example for 3D scatter plot with multiple triples of vectors, i.e. (vec1, vec2, vec3), (vec1, vec2, vec4), ...\n",
    "up.plotly.scatter_3d(\n",
    "    x=[vec1, vec1, vec1],\n",
    "    y=[vec2, vec2, vec2],\n",
    "    z=[vec3, vec4, vec5],\n",
    "    x_title='vec1',\n",
    "    y_title='vec2',\n",
    "    name=['vec3', 'vec4', 'vec5'],\n",
    "    show_line=True,\n",
    "    show_z_title=False,\n",
    "    marker_style=['o', 'd', 'x'],\n",
    "    marker_size=[5, 4, 3],\n",
    "    line_width=[3, 2, 1],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example for figure combination with Matplotlib (not yet possible with + operator)\n",
    "fig1 = up.matplotlib.contour(x=vec1, y=vec2, z=vec3)\n",
    "fig2 = up.matplotlib.scatter(fig=fig1, x=vec1, y=vec2, marker_style='d', color='black')\n",
    "fig2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### n-D plots for visualizing n vectors\n",
    "\n",
    "where n can be any number, including 1, 2, 3 and higher"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Static scatter plot matrix with Matplotlib\n",
    "up.matplotlib.scatter_matrix(data, name=name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interactive scatter plot matrix with Plotly\n",
    "up.plotly.scatter_matrix(data, name=name, show_upper=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Static box plot with Matplotlib\n",
    "up.matplotlib.box(data, name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interative box and violin plot with Plotly\n",
    "fig1 = up.plotly.box(data, name, orientation='horizontal', box_width=0.3,\n",
    "                     show_rug=False, show_x_title=False, show_y_title=False)\n",
    "fig2 = up.plotly.violin(data, name, orientation='horizontal', opacity=0.5, rug_opacity=1.0)\n",
    "fig1 + fig2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Static histogram plot with Matplotlib\n",
    "up.matplotlib.histogram(data, name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interactive density plot with Matplotlib\n",
    "up.plotly.density(data, name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interactive parallel coordinates plot with linked table based on JavaScript libraries\n",
    "up.javascript.parallel_coordinates_table(data, name, opacity=1.0)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
