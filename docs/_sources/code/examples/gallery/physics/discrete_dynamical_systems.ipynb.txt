{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Discrete dynamical systems\n",
    "\n",
    "This Jupyter notebook is an example of plotting **vector data**. It shows how the time-evolution of iterated functions can be visualized. It also demonstrates how the system responds to small changes in bifurcation parameters.\n",
    "\n",
    "## References\n",
    "\n",
    "- Wikipedia\n",
    "    - [Discrete dynamical system](https://en.wikipedia.org/wiki/Dynamical_system_(definition)#Discrete_dynamical_system)\n",
    "    - [Iterated function](https://en.wikipedia.org/wiki/Iterated_function)\n",
    "    - [List of chaotic maps](https://en.wikipedia.org/wiki/List_of_chaotic_maps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def solver(rhs_function, state_start, num_steps, **kwargs):\n",
    "    time_sequence = list(range(num_steps))\n",
    "    state_sequence = [state_start]\n",
    "    state = state_start\n",
    "    for _ in time_sequence[1:]:\n",
    "        state = rhs_function(*state, **kwargs)\n",
    "        state_sequence.append(state)\n",
    "    state_sequence = list(zip(*state_sequence))\n",
    "    return time_sequence, state_sequence"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting time evolution and state space of a system of difference equations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_dynamical_system(t, Y):\n",
    "    x, y = Y\n",
    "    fig_timeseries1 = up.matplotlib.scatter(\n",
    "        t, x, x_title='t', y_title='x', marker_size=0.7,\n",
    "        width_mm=200, height_mm=50, margin_bottom_mm=12, margin_top_mm=2)\n",
    "    fig_timeseries2 = up.matplotlib.scatter(\n",
    "        t, y, x_title='t', y_title='y', marker_size=0.7,\n",
    "        width_mm=200, height_mm=50, margin_bottom_mm=12, margin_top_mm=2)\n",
    "    fig_state_space = up.matplotlib.scatter(\n",
    "        x, y, x_title='x', y_title='y', marker_size=1.5, width_mm=200)\n",
    "    fig_timeseries1.display(inline=True)\n",
    "    fig_timeseries2.display(inline=True)\n",
    "    fig_state_space.display(inline=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting a bifurcation diagram of a system of difference equations\n",
    "\n",
    "See also [Feigenbaum constants](https://en.wikipedia.org/wiki/Feigenbaum_constants) for universal ratios visible in such plots."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_bifurcation_diagram(rhs_function, state_start, parameter_name, parameter_range,\n",
    "                             num_warmup=3000, num_used=2000, **kwargs):\n",
    "    num_steps = num_warmup + num_used\n",
    "    px, py = [], []\n",
    "    for value in parameter_range:\n",
    "        t, (x, y) = solver(rhs_function, state_start, num_steps, **{parameter_name: value}, **kwargs)\n",
    "        points_used = x[num_warmup:]\n",
    "        px.extend([value]*num_used)\n",
    "        py.extend(points_used)\n",
    "    fig = up.matplotlib.scatter(px, py, x_title=parameter_name, y_title='x',\n",
    "                                marker_size=0.15, color='black', opacity=0.075, width_mm=200)\n",
    "    fig.display(inline=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tinkerbell map\n",
    "\n",
    "- Wikipedia: [Tinkerbell map](https://en.wikipedia.org/wiki/Tinkerbell_map)\n",
    "- Paper: [Bifurcation and chaos in the Tinkerbell map](https://www.researchgate.net/publication/268018955_Bifurcation_and_chaos_in_the_Tinkerbell_map)\n",
    "\n",
    "This is a discrete system governed by a difference equation (instead of a differential equation in the continuous case)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "def tinkerbell_map(x, y, a=0.9, b=-0.6013, c=2.0, d=0.5):\n",
    "    x_new = x**2 - y**2 + a*x + b*y\n",
    "    y_new = 2*x*y + c*x + d*y\n",
    "    return x_new, y_new\n",
    "\n",
    "\n",
    "state_start = [-0.72, -0.64]\n",
    "t, Y = solver(tinkerbell_map, state_start, 20000)\n",
    "\n",
    "plot_dynamical_system(t, Y)\n",
    "plot_bifurcation_diagram(\n",
    "    tinkerbell_map, state_start, 'b', [-0.6 + x/10000.0 for x in range(2000)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bogdanov map\n",
    "\n",
    "- Wikipedia: [Bogdanov map](https://en.wikipedia.org/wiki/Bogdanov_map)\n",
    "- Mathworld: [Bogdanov map](http://mathworld.wolfram.com/BogdanovMap.html)\n",
    "- Paper: [Bifurcations and attractors in Bogdanov map](http://www.mi.sanu.ac.rs/vismath/djellit/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bogdanov_map(x, y, k=0.8, eps=0.00057, mu=-0.1):\n",
    "    y_new = y + eps*y + k*x*(x-1) + mu*x*y\n",
    "    x_new = x + y_new\n",
    "    return x_new, y_new\n",
    "\n",
    "\n",
    "state_start = [0.3, 0.3]\n",
    "t, Y = solver(bogdanov_map, state_start, 5000)\n",
    "\n",
    "plot_dynamical_system(t, Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Henon map\n",
    "\n",
    "- Wikipedia: [Hénon map](https://en.wikipedia.org/wiki/H%C3%A9non_map)\n",
    "- Mathworld: [Hénon map](http://mathworld.wolfram.com/HenonMap.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "def henon_map(x, y, a=1.42, b=0.42):\n",
    "    x_new = 1 - a * x**2 + y\n",
    "    y_new = b * x\n",
    "    return x_new, y_new\n",
    "\n",
    "\n",
    "state_start = [0.1, 0.1]\n",
    "t, Y = solver(henon_map, state_start, 20000, a=1.2)\n",
    "\n",
    "plot_dynamical_system(t, Y)\n",
    "plot_bifurcation_diagram(henon_map, state_start, 'a', [1.0 + x/6000.0 for x in range(2400)], b=0.3)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
