{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Continuous dynamical systems\n",
    "\n",
    "This Jupyter notebook is an example of plotting **vector data**. It shows how trajectories coming from the solution of initial value problems of ordinary differential equations (with and without a small initial perturbation) can be visualized in different ways.\n",
    "\n",
    "## References\n",
    "\n",
    "- Wikipedia\n",
    "    - [Dynamical system](https://en.wikipedia.org/wiki/Dynamical_system_(definition))\n",
    "        - the starting motivation of the theory was the study of time behavior of classical mechanical systems, that is the study of the initial value problems for their describing systems of ordinary differential equations\n",
    "    - [Phase space](https://en.wikipedia.org/wiki/Phase_space)\n",
    "        - a phase space is a space in which all possible states of a system are represented, with each possible state corresponding to one unique point in the phase space\n",
    "    - [Attractor](https://en.wikipedia.org/wiki/Attractor)\n",
    "        - an attractor is a set of numerical values toward which a system tends to evolve, for a wide variety of starting conditions of the system\n",
    "        - an attractor is called strange if it has a fractal structure\n",
    "    - [List_of_chaotic_maps](https://en.wikipedia.org/wiki/List_of_chaotic_maps)\n",
    "        - a chaotic map is a map (=evolution function) that exhibits some sort of chaotic behavior\n",
    "        - chaotic maps often generate fractals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "import unified_plotting as up\n",
    "from unified_plotting.utilities import ode_solver"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting time evolution and phase space of a system of ordinary differential equations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_dynamical_system(Y, t):\n",
    "    x, y, z = Y\n",
    "\n",
    "    shared_kwargs = dict(\n",
    "        show_legend=False, show_marker=False, show_line=True, line_width=0.4,\n",
    "        margin_bottom_mm=14, margin_top_mm=2)\n",
    "    fig_x = up.matplotlib.scatter(t, x, x_title='t', y_title='x', height_mm=30, **shared_kwargs)\n",
    "    fig_y = up.matplotlib.scatter(t, y, x_title='t', y_title='y', height_mm=30, **shared_kwargs)\n",
    "    fig_z = up.matplotlib.scatter(t, z, x_title='t', y_title='z', height_mm=30, **shared_kwargs)\n",
    "    fig_phase_space_3d = up.matplotlib.scatter_3d(x, y, z, **shared_kwargs)\n",
    "    \n",
    "    fig_x.display(inline=True)\n",
    "    fig_y.display(inline=True)\n",
    "    fig_z.display(inline=True)\n",
    "    fig_phase_space_3d.display(inline=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting a perturbed system of ODEs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_dynamical_system_perturbation(Y1, t1, Y2, t2):\n",
    "    x1, y1, z1 = Y1\n",
    "    x2, y2, z2 = Y2\n",
    "    \n",
    "    shared_kwargs = dict(\n",
    "        show_legend=False, show_marker=False, show_line=True, line_width=0.4,\n",
    "        margin_bottom_mm=14, margin_top_mm=2)\n",
    "    fig_x = up.matplotlib.scatter([t1, t2], [x1, x2], x_title='t', y_title='x', height_mm=30, **shared_kwargs)\n",
    "    fig_y = up.matplotlib.scatter([t1, t2], [y1, y2], x_title='t', y_title='y', height_mm=30, **shared_kwargs)\n",
    "    fig_z = up.matplotlib.scatter([t1, t2], [z1, z2], x_title='t', y_title='z', height_mm=30, **shared_kwargs)\n",
    "    fig_phase_space_3d = up.matplotlib.scatter_3d([x1, x2], [y1, y2], [z1, z2], **shared_kwargs)\n",
    "\n",
    "    fig_x.display(inline=True)\n",
    "    fig_y.display(inline=True)\n",
    "    fig_z.display(inline=True)\n",
    "    fig_phase_space_3d.display(inline=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lorenz system\n",
    "\n",
    "- Wikipedia: [Lorenz system](https://en.wikipedia.org/wiki/Lorenz_system)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lorenz_system(t, state_vector):\n",
    "    x, y, z = state_vector\n",
    "    \n",
    "    a = 10\n",
    "    b = 28\n",
    "    c = 8./3.\n",
    "    \n",
    "    dx = a*(y-x) \n",
    "    dy = x*(b-z) - y + z/5\n",
    "    dz = x*y - c*z\n",
    "    \n",
    "    state_vector_changes = [dx, dy, dz]\n",
    "    return state_vector_changes\n",
    "\n",
    "\n",
    "time_start = 0\n",
    "time_end = 100\n",
    "time_step = 0.005\n",
    "state_start_1 = [1.0, 4.0, 2.93]\n",
    "state_start_2 = [1.01, 4.01, 2.94]\n",
    "\n",
    "t1, Y1 = ode_solver.scipy(lorenz_system, state_start_1, time_start, time_end, time_step)\n",
    "t2, Y2 = ode_solver.scipy(lorenz_system, state_start_2, time_start, time_end, time_step)\n",
    "\n",
    "# plot_dynamical_system(Y1, t1)\n",
    "plot_dynamical_system_perturbation(Y1, t1, Y2, t2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Roessler system\n",
    "\n",
    "- Wikipedia: [Roessler attractor](https://en.wikipedia.org/wiki/R%C3%B6ssler_attractor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def roessler_system(t, state_vector):\n",
    "    x, y, z = state_vector\n",
    "    \n",
    "    a = 0.1\n",
    "    b = 0.1\n",
    "    c = 14\n",
    "    \n",
    "    dx = -y - z\n",
    "    dy = x + a*y\n",
    "    dz = b + z*(x-c)\n",
    "    \n",
    "    state_vector_change = [dx, dy, dz]\n",
    "    return state_vector_change\n",
    "\n",
    "\n",
    "time_start = 0\n",
    "time_end = 150\n",
    "time_step = 0.01\n",
    "state_start_1 = [10.0, 10.0, 10.0]\n",
    "state_start_2 = [20.0, 10.0, 10.0]\n",
    "\n",
    "t1, Y1 = ode_solver.scipy(roessler_system, state_start_1, time_start, time_end, time_step)\n",
    "t2, Y2 = ode_solver.scipy(roessler_system, state_start_2, time_start, time_end, time_step)\n",
    "\n",
    "plot_dynamical_system_perturbation(Y1, t1, Y2, t2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chen system\n",
    "\n",
    "- Wikipedia: [Multiscroll attractor](https://en.wikipedia.org/wiki/Multiscroll_attractor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def chen_system(t, state_vector):\n",
    "    x, y, z = state_vector\n",
    "    \n",
    "    a = 40.0\n",
    "    b = 3.0\n",
    "    c = 28.0\n",
    "    \n",
    "    dx = a * (y-x)\n",
    "    dy = (c-a)*x - x*z + c*y\n",
    "    dz = x*y - b*z\n",
    "    \n",
    "    state_vector_change = [dx, dy, dz]\n",
    "    return state_vector_change\n",
    "\n",
    "\n",
    "time_start = 0\n",
    "time_end = 50\n",
    "time_step = 0.002\n",
    "state_start_1 = [3.0, 2.8, 5.9]\n",
    "state_start_2 = [3.01, 2.81, 5.91]\n",
    "\n",
    "t1, Y1 = ode_solver.scipy(chen_system, state_start_1, time_start, time_end, time_step)\n",
    "t2, Y2 = ode_solver.scipy(chen_system, state_start_2, time_start, time_end, time_step)\n",
    "\n",
    "plot_dynamical_system_perturbation(Y1, t1, Y2, t2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rabinovich–Fabrikant system\n",
    "\n",
    "- Wikipedia: [Rabinovich–Fabrikant equations](https://en.wikipedia.org/wiki/Rabinovich%E2%80%93Fabrikant_equations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rabinovich_fabrikant_system(t, state_vector):\n",
    "    x, y, z = state_vector\n",
    "    \n",
    "    alpha = 0.14\n",
    "    gamma = 0.1\n",
    "    \n",
    "    dx = y*(z - 1 + x**2) + gamma*x\n",
    "    dy = x*(3*z + 1 - x**2) + gamma*y\n",
    "    dz = -2*z*(alpha + x*y)\n",
    "    \n",
    "    state_vector_change = [dx, dy, dz]\n",
    "    return state_vector_change\n",
    "\n",
    "\n",
    "time_start = 0\n",
    "time_end = 60\n",
    "time_step = 0.01\n",
    "state_start_1 = [2.0, 2.0, 2.0]\n",
    "state_start_2 = [2.01, 2.01, 2.009]\n",
    "\n",
    "t1, Y1 = ode_solver.scipy(rabinovich_fabrikant_system, state_start_1, time_start, time_end, time_step)\n",
    "t2, Y2 = ode_solver.scipy(rabinovich_fabrikant_system, state_start_2, time_start, time_end, time_step)\n",
    "\n",
    "plot_dynamical_system_perturbation(Y1, t1, Y2, t2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Thomas system\n",
    "\n",
    "- Wikipedia: [Thomas' cyclically symmetric attractor](https://en.wikipedia.org/wiki/Thomas%27_cyclically_symmetric_attractor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "def thomas_system(t, state_vector):\n",
    "    x, y, z = state_vector\n",
    "    \n",
    "    b = 0.181  # 0.09, 0.15, 0.181, 0.2, 0.21, 0.2081\n",
    "    \n",
    "    dx = math.sin(y) - b*x \n",
    "    dy = math.sin(z) - b*y\n",
    "    dz = math.sin(x) - b*z\n",
    "    \n",
    "    state_vector_change = [dx, dy, dz]\n",
    "    return state_vector_change\n",
    "\n",
    "\n",
    "time_start = 0\n",
    "time_end = 2000\n",
    "time_step = 0.2\n",
    "state_start_1 = [1, 4, 3.93]\n",
    "state_start_2 = [3, 4, 3.93]\n",
    "\n",
    "t1, Y1 = ode_solver.scipy(thomas_system, state_start_1, time_start, time_end, time_step)\n",
    "t2, Y2 = ode_solver.scipy(thomas_system, state_start_2, time_start, time_end, time_step)\n",
    "\n",
    "plot_dynamical_system_perturbation(Y1, t1, Y2, t2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hindmarsh-Rose system\n",
    "\n",
    "- Wikipedia: [Hindmarsh–Rose model](https://en.wikipedia.org/wiki/Hindmarsh%E2%80%93Rose_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hindmarsh_rose_system(t, state_vector):\n",
    "    x, y, z = state_vector\n",
    "    \n",
    "    a = 1.05\n",
    "    b = 2.9\n",
    "    c = 1.0\n",
    "    d = 5.0\n",
    "    s = 4.0\n",
    "    I = 10\n",
    "    x_R = -8.0/5.0\n",
    "    r = 10e-3\n",
    "    \n",
    "    def phi(x):\n",
    "        return -a*x**3 + b*x**2\n",
    "    def psi(x):\n",
    "        return c - d*x**2\n",
    "    \n",
    "    dx = y + phi(x) - z + I\n",
    "    dy = psi(x) - y\n",
    "    dz = r * (s * (x-x_R) - z)\n",
    "    \n",
    "    state_vector_change = [dx, dy, dz]\n",
    "    return state_vector_change\n",
    "\n",
    "\n",
    "time_start = 0\n",
    "time_end = 100\n",
    "time_step = 0.01\n",
    "state_start_1 = [0.0, 0.0, -2.5]\n",
    "state_start_2 = [1.0, 1.0, -1.5]\n",
    "\n",
    "t1, Y1 = ode_solver.scipy(hindmarsh_rose_system, state_start_1, time_start, time_end, time_step)\n",
    "t2, Y2 = ode_solver.scipy(hindmarsh_rose_system, state_start_2, time_start, time_end, time_step)\n",
    "\n",
    "plot_dynamical_system_perturbation(Y1, t1, Y2, t2)"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
