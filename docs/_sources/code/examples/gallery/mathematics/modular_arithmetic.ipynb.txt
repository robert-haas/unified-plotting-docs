{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modular arithmetic as directed graph\n",
    "\n",
    "This Jupyter notebook is an example of plotting **graph data**. It shows how modular arithmetic can be visualized as a directed graph.\n",
    "\n",
    "## References\n",
    "\n",
    "- Wikipedia: [Modular arithmetic](https://en.wikipedia.org/wiki/Modular_arithmetic)\n",
    "- Vitalik Buterin: [A Modular Math Interlude (modular arithmetic)](https://vitalik.ca/general/2017/11/22/starks_part_2.html#a-modular-math-interlude)\n",
    "\n",
    "## Data generation\n",
    "\n",
    "Create a directed graph where\n",
    "\n",
    "- nodes represent integers modulo `p`, i.e. the members `x` of a finite field\n",
    "- edges represent the relationship `y = x^k` (modulo p) where `x` is the source and `y` the target. This means the target is the k-th power of x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "p = 17  # 73\n",
    "k = 2\n",
    "\n",
    "# Create the graph\n",
    "graph = nx.DiGraph()\n",
    "solutions = set()\n",
    "for x in range(p):\n",
    "    y = (x ** k) % p\n",
    "    solutions.add(y)\n",
    "    graph.add_edge(x, y)\n",
    "print('Finite field with {} elements. Found a set of {} unique solutions '\n",
    "      'for the function y=x^{}.'.format(p, len(solutions), k))\n",
    "\n",
    "# Assign node properties: size and color by indegree\n",
    "for i in graph.nodes:\n",
    "    node = graph.nodes[i]\n",
    "    node['size'] = 5 + graph.in_degree(i) * 3\n",
    "    node['color'] = 'red' if graph.in_degree[i] > 0 else 'black'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.network_d3(graph, node_hover_neighborhood=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
