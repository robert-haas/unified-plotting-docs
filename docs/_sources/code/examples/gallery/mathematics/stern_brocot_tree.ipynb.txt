{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Stern-Brocot tree\n",
    "\n",
    "This Jupyter notebook is an example of plotting **graph data**. It constructs a Stern-Brocot tree with the help of 2x2 matrices and visualizes the tree as directed graph with different layouts. There is also a connection to continued fractions.\n",
    "\n",
    "## References\n",
    "\n",
    "- YouTube\n",
    "    - Wildberger: [The Stern-Brocot tree, matrices and wedges](https://www.youtube.com/watch?v=qPeD87HJ0UA) ... the implementation here was based on this explanation\n",
    "- Books\n",
    "    - Graham, Knuth, Patashnik: Concrete Mathematics (1994), p. 116\n",
    "- Wikipedia\n",
    "    - [Stern-Brocot tree](https://en.wikipedia.org/wiki/Stern%E2%80%93Brocot_tree)\n",
    "- Wolfram MathWorld\n",
    "    - [Stern-Brocot tree](https://mathworld.wolfram.com/Stern-BrocotTree.html)\n",
    "- Alexander Bogomolny\n",
    "    - [Stern-Brocot tree](https://www.cut-the-knot.org/blue/Stern.shtml)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A class for 2x2 matrices\n",
    "\n",
    "as a tool for simpler construction of the Stern-Brocot tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Matrix:\n",
    "    \"\"\"A simple class for 2x2 matrices with methods for creating a Stern-Brocot tree.\"\"\"\n",
    "\n",
    "    def __init__(self, a, b, c, d):\n",
    "        \"\"\"Define a 2x2 matrix by providing its 4 elements.\n",
    "\n",
    "        M = |a b|\n",
    "            |c d|\n",
    "        \"\"\"\n",
    "        self.a = a\n",
    "        self.b = b\n",
    "        self.c = c\n",
    "        self.d = d\n",
    "    \n",
    "    def __repr__(self):\n",
    "        \"\"\"Get a string representation of the matrix.\"\"\"\n",
    "        return '|{}  {}|\\n|{}  {}|'.format(*self.elements)\n",
    "    \n",
    "    def __add__(self, other):\n",
    "        \"\"\"Calculate matrix addition.\"\"\"\n",
    "        elements = [e1 + e2 for e1, e2 in zip(self.elements, other.elements)]\n",
    "        matrix = self.__class__(elements)\n",
    "        return matrix\n",
    "\n",
    "    def __mul__(self, other):\n",
    "        \"\"\"Calculate matrix multiplication.\"\"\"\n",
    "        # https://youtu.be/qPeD87HJ0UA?t=230\n",
    "        new_matrix = self.__class__(\n",
    "            self.a * other.a + self.b * other.c, self.a * other.b + self.b * other.d,\n",
    "            self.c * other.a + self.d * other.c, self.c * other.b + self.d * other.d)\n",
    "        return new_matrix\n",
    "\n",
    "    def __eq__(self, other):\n",
    "        \"\"\"Check if two matrices are equal.\"\"\"\n",
    "        return self.elements == other.elements\n",
    "\n",
    "    @property\n",
    "    def lc(self):\n",
    "        \"\"\"Create the left child in a Stern-Brocot tree with matrix elements.\n",
    "\n",
    "        References\n",
    "        ----------\n",
    "        - https://youtu.be/qPeD87HJ0UA?t=419\n",
    "        \"\"\"\n",
    "        return self.__class__(\n",
    "            self.a + self.b, self.b,\n",
    "            self.c + self.d, self.d)\n",
    "    \n",
    "    @property\n",
    "    def rc(self):\n",
    "        \"\"\"Create the right child in a Stern-Brocot tree with matrix elements.\"\"\"\n",
    "        return Matrix(self.a, self.a + self.b, self.c, self.c + self.d)\n",
    "\n",
    "    @property\n",
    "    def elements(self):\n",
    "        \"\"\"Get the matrix elements as tuple.\"\"\"\n",
    "        return self.a, self.b, self.c, self.d\n",
    "    \n",
    "    @property\n",
    "    def numerator(self):\n",
    "        \"\"\"Get the numerator of the fraction.\"\"\"\n",
    "        return self.a + self.b\n",
    "\n",
    "    @property\n",
    "    def denominator(self):\n",
    "        \"\"\"Get the denominator of the fraction.\"\"\"\n",
    "        return self.c + self.d\n",
    "\n",
    "    @property\n",
    "    def fraction(self):\n",
    "        \"\"\"Reconstruct the fraction that corresponds to the matrix.\"\"\"\n",
    "        return self.numerator, self.denominator\n",
    "\n",
    "    @property\n",
    "    def fraction_string(self):\n",
    "        \"\"\"Get a string representation of the fraction.\"\"\"\n",
    "        return '{}/{}'.format(*self.fraction)\n",
    "\n",
    "    @property\n",
    "    def decimal(self):\n",
    "        \"\"\"Get a decimal representation of the fraction.\"\"\"\n",
    "        return self.numerator / self.denominator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Identity matrix and two operators for creating left and right children\n",
    "I = Matrix(1, 0, 0, 1)\n",
    "L = Matrix(1, 0, 1, 1)\n",
    "R = Matrix(1, 1, 0, 1)\n",
    "\n",
    "# equivalence of matrix multiplication (star notation) and branching methods (dot notation)\n",
    "M1 = I * L * L * R * L * R\n",
    "M2 = I.lc.lc.rc.lc.rc\n",
    "assert M1 == M2\n",
    "\n",
    "print('Matrix')\n",
    "print(M1)\n",
    "print()\n",
    "print('Fraction')\n",
    "print('- as tuple:', M1.fraction)\n",
    "print('- as numerator and denominator:', M1.numerator, M1.denominator)\n",
    "print('- as string:', M1.fraction_string)\n",
    "print('- as decimal number:', M1.decimal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Level 0\n",
    "I.fraction_string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Level 1\n",
    "I.lc.fraction_string, I.rc.fraction_string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Level 2\n",
    "I.lc.lc.fraction_string, I.lc.rc.fraction_string, I.rc.lc.fraction_string, I.rc.rc.fraction_string"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Construction of the tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_levels = 8\n",
    "dg = nx.DiGraph()\n",
    "\n",
    "def to_hover_message(matrix):\n",
    "    return 'Matrix:\\n{}<br><br>Fraction: {} = {}'.format(matrix, matrix.fraction_string, matrix.decimal)\n",
    "\n",
    "root = Matrix(1, 0,\n",
    "              0, 1)\n",
    "sequence = [root]\n",
    "for level in range(1, num_levels):\n",
    "    new_sequence = []\n",
    "    for i, item in enumerate(sequence):\n",
    "        # Stern-Brocot tree construction\n",
    "        child1, child2 = item.lc, item.rc\n",
    "        new_sequence.append(child1)\n",
    "        new_sequence.append(child2)\n",
    "        \n",
    "        # Directed graph construction\n",
    "        dg.add_edge(item.fraction_string, child1.fraction_string)\n",
    "        dg.add_edge(item.fraction_string, child2.fraction_string)\n",
    "        edge1 = dg.edges[(item.fraction_string, child1.fraction_string)]\n",
    "        edge2 = dg.edges[(item.fraction_string, child2.fraction_string)]\n",
    "        edge1['label'] = 'L'\n",
    "        edge1['color'] = 'red'\n",
    "        edge1['label_color'] = 'red'\n",
    "        edge2['label'] = 'R'\n",
    "        # Add node attributes\n",
    "        parent_node = dg.nodes[item.fraction_string]\n",
    "        child_node1 = dg.nodes[child1.fraction_string]\n",
    "        child_node2 = dg.nodes[child2.fraction_string]\n",
    "        parent_node['fraction'] = item.fraction\n",
    "        child_node1['fraction'] = child1.fraction\n",
    "        child_node2['fraction'] = child2.fraction\n",
    "        parent_node['elements'] = item.elements\n",
    "        child_node1['elements'] = child1.elements\n",
    "        child_node2['elements'] = child2.elements\n",
    "        parent_node['hover'] = to_hover_message(item)\n",
    "        child_node1['hover'] = to_hover_message(child1)\n",
    "        child_node2['hover'] = to_hover_message(child2)\n",
    "        parent_node['x'] = (-len(sequence) / 2 + i) * 50\n",
    "        parent_node['y'] = (level - 1) * 50\n",
    "        child_node1['color'] = 'red'\n",
    "        child_node1['label_color'] = 'red'\n",
    "    sequence = new_sequence\n",
    "\n",
    "# Node attributes for lowest level\n",
    "for i, item in enumerate(sequence):\n",
    "    parent_node = dg.nodes[item.fraction_string]\n",
    "    parent_node['x'] = (-len(sequence) / 2 + i) * 50\n",
    "    parent_node['y'] = level * 50"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization of the tree\n",
    "\n",
    "The following shows different embeddings of the same Stern-Brocot tree."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.network_vis(\n",
    "    dg, zoom_factor=0.45, edge_curvature=0, show_edge_label=True, edge_label_data_source='label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign different coordinates to each node: numerator as x, denominator as y\n",
    "# - see https://youtu.be/qPeD87HJ0UA?t=1272\n",
    "dg2 = dg.copy()\n",
    "for node_id in dg2.nodes:\n",
    "    node = dg2.nodes[node_id]\n",
    "    node['x'] = node['fraction'][0] * 50 - 900\n",
    "    node['y'] = -node['fraction'][1] * 50 + 900\n",
    "\n",
    "up.javascript.network_vis(dg2, edge_curvature=0, show_edge_label=True, edge_label_data_source='label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Assign different coordinates to each node: sum of left column as x, sum of right column as y\n",
    "dg3 = dg.copy()\n",
    "for node_id in dg3.nodes:\n",
    "    node = dg3.nodes[node_id]\n",
    "    node['x'] = (node['elements'][0] + node['elements'][2]) * 50 - 900\n",
    "    node['y'] = -(node['elements'][1] + node['elements'][3]) * 50 +  900\n",
    "\n",
    "up.javascript.network_vis(dg3, edge_curvature=0, show_edge_label=True, edge_label_data_source='label')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Connection to continued fractions and mathematical constants\n",
    "\n",
    "- [Continued fraction](https://en.wikipedia.org/wiki/Continued_fraction)\n",
    "\n",
    "See book p. 122"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Euler's number e as continued fraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Continued fraction representations of the irrational number e by an integer sequence with a simple pattern\n",
    "e_sequence = [\n",
    "    2, 1,\n",
    "    2, 1, 1,\n",
    "    4, 1, 1,\n",
    "    6, 1, 1,\n",
    "    8, 1, 1,\n",
    "    10, 1, 1,\n",
    "    12, 1, 1,\n",
    "    14, 1, 1,\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Continued fraction\n",
    "# - Using the integers of the sequence as denominators in a continued fraction\n",
    "\n",
    "result = None\n",
    "for element in reversed(e_sequence):\n",
    "    if result is None:\n",
    "        result = 1.0 / element\n",
    "    else:\n",
    "        result = 1.0 / (element + result)\n",
    "\n",
    "print(1.0 / result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Euler's number e as walk in the Stern-Brocot tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Stern-Brocot system\n",
    "# - Using the integers of the sequence as a series of L and R operations to perform a walk in the tree\n",
    "\n",
    "def change_or_add_edge(graph, M1, M2, operator_name):\n",
    "    try:\n",
    "        edge = graph.edges[(M1.fraction_string, M2.fraction_string)]\n",
    "    except Exception:\n",
    "        graph.add_edge(M1.fraction_string, M2.fraction_string)\n",
    "        edge = graph.edges[(M1.fraction_string, M2.fraction_string)]\n",
    "    color = 'black' if operator_name == 'R' else 'red'\n",
    "    edge['label'] = operator_name\n",
    "    edge['size'] = 10\n",
    "    edge['color'] = color\n",
    "    edge['label_color'] = 'green'\n",
    "    edge['label_size'] = 20\n",
    "    for M in [M1, M2]:\n",
    "        node = graph.nodes[M.fraction_string]\n",
    "        node['size'] = 18\n",
    "        node['shape'] = 'rectangle'\n",
    "        node['fraction'] = M.fraction\n",
    "        node['elements'] = M.elements\n",
    "        node['hover'] = to_hover_message(M)\n",
    "        if M is M2:\n",
    "            node['color'] = color\n",
    "            node['label_color'] = color\n",
    "\n",
    "\n",
    "I = Matrix(1, 0,\n",
    "           0, 1)\n",
    "M = I\n",
    "operator = R\n",
    "for element in e_sequence:\n",
    "    for _ in range(element):\n",
    "        M_new = M * operator\n",
    "        op_name = 'R' if operator is R else 'L'\n",
    "        print(op_name, end='')\n",
    "        change_or_add_edge(dg2, M, M_new, op_name)  # add the walk into the digraph\n",
    "        M = M_new\n",
    "    operator = L if operator == R else R\n",
    "\n",
    "print('\\n\\n{} = {}'.format(M.fraction_string, M.decimal))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.network_vis(dg2, edge_curvature=0, show_edge_label=True, edge_label_data_source='label')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Generalization of the Stern-Brocot tree\n",
    "\n",
    "This is an attempt to generalize the Stern-Brocot tree by replacing 2d matrices with 3d matrices and keeping the operations as close to the 2d case as possible. The resulting tree and its embeddings apparently share some similarity to the 2d case. Of course there is more freedom of interpretation due to the higher number of constituents, therefore I'll leave speculation about possible meanings to the reader."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Matrix3d:\n",
    "    \"\"\"A simple class for 3x3 matrices with methods for creating a generalized Stern-Brocot tree.\"\"\"\n",
    "\n",
    "    def __init__(self, a, b, c, d, e, f, g, h, i):\n",
    "        \"\"\"Define a 3x3 matrix by providing its 9 elements.\n",
    "\n",
    "        M = |a b c|\n",
    "            |d e f|\n",
    "            |g h i|\n",
    "        \"\"\"\n",
    "        self.a = a\n",
    "        self.b = b\n",
    "        self.c = c\n",
    "        self.d = d\n",
    "        self.e = e\n",
    "        self.f = f\n",
    "        self.g = g\n",
    "        self.h = h\n",
    "        self.i = i\n",
    "    \n",
    "    def __repr__(self):\n",
    "        \"\"\"Get a string representation of the matrix.\"\"\"\n",
    "        return '|{}  {}  {}|\\n|{}  {}  {}|\\n|{}  {}  {}|'.format(*self.elements)\n",
    "    \n",
    "    def __add__(self, other):\n",
    "        \"\"\"Calculate matrix addition.\"\"\"\n",
    "        elements = [e1 + e2 for e1, e2 in zip(self.elements, other.elements)]\n",
    "        matrix = self.__class__(elements)\n",
    "        return matrix\n",
    "\n",
    "    def __eq__(self, other):\n",
    "        \"\"\"Check if two matrices are equal.\"\"\"\n",
    "        return self.elements == other.elements\n",
    "\n",
    "    @property\n",
    "    def elements(self):\n",
    "        \"\"\"Get the matrix elements as tuple.\"\"\"\n",
    "        return self.a, self.b, self.c, self.d, self.e, self.f, self.g, self.h, self.i\n",
    "\n",
    "    @property\n",
    "    def lc(self):\n",
    "        \"\"\"Create the left child in a generalized Stern-Brocot tree with matrix elements.\"\"\"\n",
    "        new_matrix = self.__class__(\n",
    "            self.a + self.b + self.c, self.b, self.c,\n",
    "            self.d + self.e + self.f, self.e, self.f,\n",
    "            self.g + self.h + self.i, self.h, self.i)\n",
    "        return new_matrix\n",
    "    \n",
    "    @property\n",
    "    def mc(self):\n",
    "        \"\"\"Create the middle child in a generalized Stern-Brocot tree with matrix elements.\"\"\"\n",
    "        new_matrix = self.__class__(\n",
    "            self.a, self.b + self.a + self.c, self.c,\n",
    "            self.d, self.e + self.d + self.f, self.f,\n",
    "            self.g, self.h + self.g + self.i, self.i)\n",
    "        return new_matrix\n",
    "\n",
    "    @property\n",
    "    def rc(self):\n",
    "        \"\"\"Create the right child in a generalized Stern-Brocot tree with matrix elements.\"\"\"\n",
    "        new_matrix = self.__class__(\n",
    "            self.a, self.b, self.c + self.b + self.a,\n",
    "            self.d, self.e, self.f + self.e + self.d,\n",
    "            self.g, self.h, self.i + self.h + self.g)\n",
    "        return new_matrix\n",
    "    \n",
    "    @property\n",
    "    def fractions_string(self):\n",
    "        \"\"\"Get a string representation of both fractions.\"\"\"\n",
    "        return '{}, {}'.format(self.fraction1_string, self.fraction2_string)\n",
    "    \n",
    "    @property\n",
    "    def numerator1(self):\n",
    "        \"\"\"Get the numerator of the first fraction.\"\"\"\n",
    "        return self.a + self.b + self.c\n",
    "\n",
    "    @property\n",
    "    def denominator1(self):\n",
    "        \"\"\"Get the denominator of the first fraction.\"\"\"\n",
    "        return self.d + self.e + self.f\n",
    "\n",
    "    @property\n",
    "    def fraction1(self):\n",
    "        \"\"\"Reconstruct the first fraction that is contained in the matrix.\"\"\"\n",
    "        return self.numerator1, self.denominator1\n",
    "\n",
    "    @property\n",
    "    def fraction1_string(self):\n",
    "        \"\"\"Get a string representation of the first fraction.\"\"\"\n",
    "        return '{}/{}'.format(*self.fraction1)\n",
    "\n",
    "    @property\n",
    "    def decimal1(self):\n",
    "        \"\"\"Get a decimal representation of the first fraction.\"\"\"\n",
    "        return self.numerator1 / self.denominator1\n",
    "\n",
    "    @property\n",
    "    def numerator2(self):\n",
    "        \"\"\"Get the numerator of the second fraction.\"\"\"\n",
    "        return self.d + self.e + self.f\n",
    "\n",
    "    @property\n",
    "    def denominator2(self):\n",
    "        \"\"\"Get the denominator of the second fraction.\"\"\"\n",
    "        return self.g + self.h + self.i\n",
    "\n",
    "    @property\n",
    "    def fraction2(self):\n",
    "        \"\"\"Reconstruct the second fraction that is contained in the matrix.\"\"\"\n",
    "        return self.numerator2, self.denominator2\n",
    "\n",
    "    @property\n",
    "    def fraction2_string(self):\n",
    "        \"\"\"Get a string representation of the second fraction.\"\"\"\n",
    "        return '{}/{}'.format(*self.fraction2)\n",
    "\n",
    "    @property\n",
    "    def decimal2(self):\n",
    "        \"\"\"Get a decimal representation of the second fraction.\"\"\"\n",
    "        return self.numerator2 / self.denominator2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_levels = 5\n",
    "dg = nx.DiGraph()\n",
    "\n",
    "def to_hover_message(matrix):\n",
    "    return 'Matrix:\\n{}<br><br>Fraction1: {} = {}<br>Fraction2: {} = {}'.format(\n",
    "        matrix, matrix.fraction1_string, matrix.decimal1, matrix.fraction2_string, matrix.decimal2)\n",
    "\n",
    "root = Matrix3d(\n",
    "    1, 0, 0,\n",
    "    0, 1, 0,\n",
    "    0, 0, 1)\n",
    "sequence = [root]\n",
    "for level in range(1, num_levels):\n",
    "    new_sequence = []\n",
    "    for i, item in enumerate(sequence):\n",
    "        # Stern-Brocot tree construction\n",
    "        child1, child2, child3 = item.lc, item.mc, item.rc\n",
    "        new_sequence.append(child1)\n",
    "        new_sequence.append(child2)\n",
    "        new_sequence.append(child3)\n",
    "        \n",
    "        # Directed graph construction\n",
    "        dg.add_edge(item.fractions_string, child1.fractions_string)\n",
    "        dg.add_edge(item.fractions_string, child2.fractions_string)\n",
    "        dg.add_edge(item.fractions_string, child3.fractions_string)\n",
    "        edge1 = dg.edges[(item.fractions_string, child1.fractions_string)]\n",
    "        edge2 = dg.edges[(item.fractions_string, child2.fractions_string)]\n",
    "        edge3 = dg.edges[(item.fractions_string, child3.fractions_string)]\n",
    "        edge1['label'] = 'L'\n",
    "        edge1['color'] = 'red'\n",
    "        edge1['label_color'] = 'red'\n",
    "        edge2['label'] = 'M'\n",
    "        edge2['color'] = 'blue'\n",
    "        edge2['label_color'] = 'blue'\n",
    "        edge3['label'] = 'R'\n",
    "        # Add node attributes\n",
    "        parent_node = dg.nodes[item.fractions_string]\n",
    "        child_node1 = dg.nodes[child1.fractions_string]\n",
    "        child_node2 = dg.nodes[child2.fractions_string]\n",
    "        child_node3 = dg.nodes[child3.fractions_string]\n",
    "        parent_node['elements'] = item.elements\n",
    "        child_node1['elements'] = child1.elements\n",
    "        child_node2['elements'] = child2.elements\n",
    "        child_node3['elements'] = child3.elements\n",
    "        parent_node['hover'] = to_hover_message(item)\n",
    "        child_node1['hover'] = to_hover_message(child1)\n",
    "        child_node2['hover'] = to_hover_message(child2)\n",
    "        child_node3['hover'] = to_hover_message(child3)\n",
    "        parent_node['x'] = (-len(sequence) / 2 + i) * 100\n",
    "        parent_node['y'] = (level - 1) * 50\n",
    "        child_node1['color'] = 'red'\n",
    "        child_node1['label_color'] = 'red'\n",
    "        child_node2['color'] = 'blue'\n",
    "        child_node2['label_color'] = 'blue'\n",
    "    sequence = new_sequence\n",
    "\n",
    "# Node attributes for lowest level\n",
    "for i, item in enumerate(sequence):\n",
    "    parent_node = dg.nodes[item.fractions_string]\n",
    "    parent_node['x'] = (-len(sequence) / 2 + i) * 100\n",
    "    parent_node['y'] = level * 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.network_vis(\n",
    "    dg, zoom_factor=0.45, edge_curvature=0, show_edge_label=True, edge_label_data_source='label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign different 3d coordinates to each node: sum of row 1 as x, row 2 as y, row 3 as z\n",
    "dg2 = dg.copy()\n",
    "for node_id in dg2.nodes:\n",
    "    node = dg2.nodes[node_id]\n",
    "    m = node['elements']\n",
    "    x = m[0] + m[1] + m[2]\n",
    "    y = m[3] + m[4] + m[5]\n",
    "    z = m[6] + m[7] + m[8]\n",
    "    node['x'] = x * 50 - 200\n",
    "    node['y'] = -y * 50 + 200\n",
    "    node['z'] = -z * 50 + 200\n",
    "\n",
    "up.javascript.network_webgl(\n",
    "    dg2, edge_curvature=0, show_edge_label=True, edge_label_data_source='label',\n",
    "    large_network_threshold=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign different 3d coordinates to each node: sum of column 1 as x, column 2 as y, column 3 as z\n",
    "dg2 = dg.copy()\n",
    "for node_id in dg2.nodes:\n",
    "    node = dg2.nodes[node_id]\n",
    "    m = node['elements']    \n",
    "    x = m[0] + m[3] + m[6]\n",
    "    y = m[1] + m[4] + m[7]\n",
    "    z = m[2] + m[5] + m[8]\n",
    "    node['x'] = x * 50 - 200\n",
    "    node['y'] = -y * 50 + 200\n",
    "    node['z'] = -z * 50 + 200\n",
    "\n",
    "up.javascript.network_webgl(\n",
    "    dg2, edge_curvature=0, show_edge_label=True, edge_label_data_source='label',\n",
    "    large_network_threshold=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign different 2d coordinates to each node: fraction1 as x, fraction2 as y\n",
    "dg2 = dg.copy()\n",
    "for node_id in dg2.nodes:\n",
    "    node = dg2.nodes[node_id]\n",
    "    m = node['elements']\n",
    "    r1 = m[0] + m[1] + m[2]\n",
    "    r2 = m[3] + m[4] + m[5]\n",
    "    r3 = m[6] + m[7] + m[8]\n",
    "    node['x'] = r1 / r2 * 700\n",
    "    node['y'] = -r2 / r3 * 700\n",
    "\n",
    "up.javascript.network_vis(\n",
    "    dg2, edge_curvature=0, show_edge_label=True, edge_label_data_source='label',\n",
    "    large_network_threshold=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Assign different 2d coordinates to each node: row1 * row as x, fraction2 as y\n",
    "dg2 = dg.copy()\n",
    "for node_id in dg2.nodes:\n",
    "    node = dg2.nodes[node_id]\n",
    "    m = node['elements']\n",
    "    r1 = m[0] + m[1] + m[2]\n",
    "    r2 = m[3] + m[4] + m[5]\n",
    "    r3 = m[6] + m[7] + m[8]\n",
    "    node['x'] = (r1 / r2) * r3 * 100\n",
    "    node['y'] = -r1 * (r2 / r3) * 100\n",
    "\n",
    "up.javascript.network_vis(\n",
    "    dg2, edge_curvature=0, show_edge_label=True, edge_label_data_source='label',\n",
    "    large_network_threshold=1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Euler's number e plus 1 as walk in the generalized Stern-Brocot tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using the integers of the e sequence as a series of L and R operations\n",
    "# to perform a walk in the generalized tree\n",
    "\n",
    "def change_or_add_edge(graph, M1, M2, operator_name):\n",
    "    try:\n",
    "        edge = graph.edges[(M1.fractions_string, M2.fractions_string)]\n",
    "    except Exception:\n",
    "        graph.add_edge(M1.fractions_string, M2.fractions_string)\n",
    "        edge = graph.edges[(M1.fractions_string, M2.fractions_string)]\n",
    "    color = 'black' if operator_name == 'R' else 'red'\n",
    "    edge['label'] = operator_name\n",
    "    edge['size'] = 10\n",
    "    edge['color'] = color\n",
    "    edge['label_color'] = 'green'\n",
    "    edge['label_size'] = 20\n",
    "    for M in [M1, M2]:\n",
    "        node = graph.nodes[M.fractions_string]\n",
    "        node['size'] = 18\n",
    "        node['shape'] = 'rectangle'\n",
    "        node['fraction1'] = M.fraction1\n",
    "        node['fraction2'] = M.fraction2\n",
    "        node['elements'] = M.elements\n",
    "        node['hover'] = to_hover_message(M)\n",
    "        if M is M2:\n",
    "            node['color'] = color\n",
    "            node['label_color'] = color\n",
    "\n",
    "\n",
    "I = Matrix3d(1, 0, 0,\n",
    "             0, 1, 0,\n",
    "             0, 0, 1)\n",
    "M = I\n",
    "operator = 'R'\n",
    "for element in e_sequence:\n",
    "    for _ in range(element):\n",
    "        if operator == 'R':\n",
    "            M_new = M.rc\n",
    "        else:\n",
    "            M_new = M.lc\n",
    "        print(operator, end='')\n",
    "        change_or_add_edge(dg2, M, M_new, operator)  # add the walk into the digraph\n",
    "        M = M_new\n",
    "    operator = 'L' if operator == 'R' else 'R'\n",
    "\n",
    "print('\\n\\nMatrix:\\n{}\\n\\nFraction 1: {} = {}\\nFraction 2: {} = {}'.format(\n",
    "    M, M.fraction1_string, M.decimal1, M.fraction2_string, M.decimal2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# How can this be interpreted?\n",
    "# - Initial observations\n",
    "#   - Apparent: Fraction 2 = 2.7182818 is e + 1\n",
    "#   - Web search: Fraction 1 = 0.7310585 is output of logistic function e(t) / (1 + e(t)) at t=1\n",
    "# - Deduced\n",
    "#   - Fraction 1 can be expressed with fraction 2\n",
    "#   - Fraction 1 times fraction 2 gives e\n",
    "#   - Numerator of fraction 1 together with denominator of fraction 2 gives e\n",
    "# - Other observation\n",
    "#   - Web search: 1.7310585 => \"tables of angular spheroidal wave functions\", \"Non-Classical Hydrogen Bonding\"\n",
    "\n",
    "import math\n",
    "\n",
    "b = math.e + 1               # fraction1 is e+1\n",
    "a = math.e / (1 + math.e)    # fraction2 is the logistic function with t=1: e/(1+e)\n",
    "assert a == math.e / b       # fraction 1 expressed by fraction 2\n",
    "assert b == math.e / a       # fraction 2 expressed by fraction 1\n",
    "\n",
    "e1 = a * b                   # e calculated by multiplication of fraction 1 and 2\n",
    "e2 = 1286807394 / 473389985  # e calculated by using numerator1 and denominator 2\n",
    "\n",
    "a, b, e1, e2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.network_vis(dg2, edge_curvature=0, show_edge_label=True, edge_label_data_source='label')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Further generalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MatrixGeneral:\n",
    "    \"\"\"A simple class for nxn matrices with methods for creating a generalized Stern-Brocot tree.\"\"\"\n",
    "\n",
    "    def __init__(self, element_list):\n",
    "        \"\"\"Define a nxn matrix by providing its 9 elements.\"\"\"\n",
    "        from math import sqrt\n",
    "        root = int(sqrt(len(element_list)))\n",
    "        if root**2 != len(element_list):\n",
    "            raise ValueError('Invalid number of elements, not an integer sqrt(): {}'.format(\n",
    "                len(elements)))\n",
    "        self.element_list = element_list\n",
    "        self.n = root\n",
    "\n",
    "    def __repr__(self):\n",
    "        \"\"\"Get a string representation of the matrix.\"\"\"\n",
    "        row = '|{}|'.format('  '.join(['{}'] * self.n))\n",
    "        matrix = '\\n'.join([row] * self.n)\n",
    "        return matrix.format(*self.elements)\n",
    "\n",
    "    def __add__(self, other):\n",
    "        \"\"\"Calculate matrix addition.\"\"\"\n",
    "        new_elements = [e1 + e2 for e1, e2 in zip(self.element_list, other.element_list)]\n",
    "        matrix = self.__class__(new_elements)\n",
    "        return matrix\n",
    "\n",
    "    def __eq__(self, other):\n",
    "        \"\"\"Check if two matrices are equal.\"\"\"\n",
    "        return self.element_list == other.element_list\n",
    "\n",
    "    @property\n",
    "    def elements(self):\n",
    "        \"\"\"Get the matrix elements as tuple.\"\"\"\n",
    "        return self.element_list\n",
    "\n",
    "    @property\n",
    "    def lc(self):\n",
    "        \"\"\"Create the left child in a generalized Stern-Brocot tree with matrix elements.\"\"\"\n",
    "        new_elements = []\n",
    "        for i in range(self.n):\n",
    "            for j in range(self.n):\n",
    "                if j == 0:\n",
    "                    new_element = 0\n",
    "                    for k in range(self.n):\n",
    "                        new_element += self.element_list[i * self.n + k]\n",
    "                else:\n",
    "                    new_element = self.element_list[i * self.n + j]\n",
    "                new_elements.append(new_element)\n",
    "        new_matrix = self.__class__(new_elements)\n",
    "        return new_matrix\n",
    "\n",
    "    @property\n",
    "    def rc(self):\n",
    "        \"\"\"Create the right child in a generalized Stern-Brocot tree with matrix elements.\"\"\"\n",
    "        new_elements = []\n",
    "        for i in range(self.n):\n",
    "            for j in range(self.n):\n",
    "                if j == (self.n - 1):\n",
    "                    new_element = 0\n",
    "                    for k in range(self.n):\n",
    "                        new_element += self.element_list[i * self.n + k]\n",
    "                else:\n",
    "                    new_element = self.element_list[i * self.n + j]\n",
    "                new_elements.append(new_element)\n",
    "        new_matrix = self.__class__(new_elements)\n",
    "        return new_matrix\n",
    "\n",
    "    @property\n",
    "    def fractions(self):\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Euler sequence with 5x5 matrix ... seems not to add information in comparison to the 3x3 case\n",
    "I = MatrixGeneral([1, 0, 0, 0,\n",
    "                   0, 1, 0, 0,\n",
    "                   0, 0, 1, 0,\n",
    "                   0, 0, 0, 1])\n",
    "M = I\n",
    "operator = 'R'\n",
    "for element in e_sequence:\n",
    "    for _ in range(element):\n",
    "        if operator == 'R':\n",
    "            M_new = M.rc\n",
    "        else:\n",
    "            M_new = M.lc\n",
    "        print(operator, end='')\n",
    "        M = M_new\n",
    "    operator = 'L' if operator == 'R' else 'R'\n",
    "\n",
    "print('\\n\\nMatrix:\\n{}'.format(M))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Euler sequence with 5x5 matrix ... seems not to add information in comparison to the 3x3 case\n",
    "I = MatrixGeneral([1, 0, 0, 0, 0,\n",
    "                   0, 1, 0, 0, 0,\n",
    "                   0, 0, 1, 0, 0,\n",
    "                   0, 0, 0, 1, 0,\n",
    "                   0, 0, 0, 0, 1])\n",
    "M = I\n",
    "operator = 'R'\n",
    "for element in e_sequence:\n",
    "    for _ in range(element):\n",
    "        if operator == 'R':\n",
    "            M_new = M.rc\n",
    "        else:\n",
    "            M_new = M.lc\n",
    "        print(operator, end='')\n",
    "        M = M_new\n",
    "    operator = 'L' if operator == 'R' else 'R'\n",
    "    \n",
    "print('\\n\\nMatrix:\\n{}'.format(M))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
