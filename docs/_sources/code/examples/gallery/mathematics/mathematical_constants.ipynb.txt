{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mathematical constants as directed graphs\n",
    "\n",
    "This Jupyter notebook is an example of plotting **graph data**. It shows how mathematical constants like ``pi`` or `` e `` can be interpreted as sequence of numbers that describe a directed graph (=network with directed edges shown as arrows). Playing around a bit led to the observation that this graph representation might be useful to analyze the randomness in number sequences by looking at combinations of certain graph measures.\n",
    "\n",
    "## References\n",
    "\n",
    "- Source of mathematical constants with millions of digits after the comma: http://www.numberworld.org/constants.html\n",
    "- RdBu colormap from Colorbrewer: [diverging, RdBu, 10](http://colorbrewer2.org/#type=diverging&scheme=RdBu&n=10)\n",
    "\n",
    "## Data generation\n",
    "\n",
    "Mathematical constants can be used to generate directed graphs (\"digraphs\") in following way:\n",
    "\n",
    "1. Treat the digits after the comma as a string of meaningless symbols.\n",
    "2. Split this string into k-tuples, e.g. for ``pi`` = 3.141592653... the 3-tuples would be 141, 592, 653, ...\n",
    "3. Use the tuple sequence as edges of a digraph, e.g. node 141 has an edge to node 592, node 592 has an edge to node 653, ...\n",
    "\n",
    "Can these digraphs be used to distinguish mathematical constants from pseudo-random numbers? Answer: Apparently yes, but not perfectly since there are counter examples, so it would require statistical tests to see if it might be a significant indicator of pseudo-randomness."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "import networkx as nx\n",
    "\n",
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def file_to_text(filepath):\n",
    "    with open(filepath) as f:\n",
    "        return f.read()\n",
    "\n",
    "\n",
    "def text_to_k_tuples(text, k):\n",
    "    return [text[i:i+k] for i in range(2, len(text), k)]\n",
    "\n",
    "\n",
    "def first_n_tuples_to_digraph(tuples, n):\n",
    "    n_tenth = n / 10\n",
    "    colors_RdBu = [\n",
    "        '#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7',\n",
    "        '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061']\n",
    "    graph = nx.DiGraph()\n",
    "    used_tuples = tuples[:n]\n",
    "    for i, (t1, t2) in enumerate(zip(used_tuples, used_tuples[1:])):\n",
    "        graph.add_node(t1)\n",
    "        graph.add_node(t2)\n",
    "        graph.add_edge(t1, t2)\n",
    "        graph.edges[(t1, t2)]['color'] = colors_RdBu[int(i/n_tenth)]\n",
    "\n",
    "    def add_edge_sizes_from_betweenness():\n",
    "        for edge_id, betweenness in nx.edge_betweenness_centrality(graph).items():\n",
    "            edge = graph.edges[edge_id]\n",
    "            edge['size'] = 2 + betweenness * 500\n",
    "    \n",
    "    def add_node_sizes_from_betweenness():\n",
    "        for node_id, betweenness in nx.betweenness_centrality(graph).items():\n",
    "            node = graph.nodes[node_id]\n",
    "            node['size'] = 10 + betweenness * 500\n",
    "\n",
    "    def add_node_sizes_from_degree():\n",
    "        for node_id in graph.nodes:\n",
    "            node = graph.nodes[node_id]\n",
    "            degree = graph.in_degree(node_id)\n",
    "            node['size'] = 10 + degree * 40\n",
    "\n",
    "    def add_positions(tuples):\n",
    "        sorted_tuples = list(sorted(tuples))\n",
    "        x_shift = len(tuples) * 50 / 2\n",
    "        y_shift = 9000\n",
    "        for node_id in graph.nodes:\n",
    "            node = graph.nodes[node_id]\n",
    "            node['x'] = sorted_tuples.index(node_id) * 50 - x_shift\n",
    "            node['y'] = node['size'] * 100 - y_shift\n",
    "    \n",
    "    def print_graph_statistics(g):\n",
    "        print()\n",
    "        print('Directed graph')\n",
    "        print('- Density: {}'.format(nx.density(g)))\n",
    "        print('- Reciprocity: {}'.format(nx.reciprocity(g)))\n",
    "        print('- Degree-degree correlation (assortativity): {}'.format(\n",
    "            nx.degree_pearson_correlation_coefficient(g)))\n",
    "\n",
    "    add_edge_sizes_from_betweenness()\n",
    "    #add_node_sizes_from_betweenness()\n",
    "    add_node_sizes_from_degree()\n",
    "    add_positions(used_tuples)\n",
    "    print_graph_statistics(graph)\n",
    "    return graph\n",
    "\n",
    "\n",
    "def constant_to_digraph(filename, k, n):\n",
    "    filepath = os.path.join('..', '..', 'data', 'mathematical_constants', filename)\n",
    "    text = file_to_text(filepath)\n",
    "    tuples = text_to_k_tuples(text, k)\n",
    "    print('Tuple sequence: {}, ...'.format(', '.join(tuples[:10])))\n",
    "    g = first_n_tuples_to_digraph(tuples, n)\n",
    "    fig = up.javascript.network_d3(\n",
    "        g, network_height=300, edge_curvature=0.15,\n",
    "        zoom_factor=0.03, many_body_force_strength=-700, node_label_size_factor=3.0)\n",
    "    return fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = 3\n",
    "n = 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "constant_to_digraph('pi_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "constant_to_digraph('e_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "constant_to_digraph('phi_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "constant_to_digraph('gamma_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "constant_to_digraph('log2_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "constant_to_digraph('log10_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "constant_to_digraph('sqrt2_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "constant_to_digraph('sqrt3_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "constant_to_digraph('random1_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "constant_to_digraph('random2_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "constant_to_digraph('random3_decimal_2m.txt', k, n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A signal of non-randomness in several constants?\n",
    "\n",
    "The digraphs constructed from the first 200 to 300 3-tuples of digits after the comma differ slightly in their structural properties when comparing constants with pseudo-random numbers. There seem to be different reciprocities and degree assortativities (linear degree correlations). This could mean that there is structure in mathematical constants, or what is much more likely, that there is structure in pseudo-random numbers that can be detected with network measures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def first_n_tuples_to_digraph_only(tuples, n):\n",
    "    graph = nx.DiGraph()\n",
    "    used_tuples = tuples[:n]\n",
    "    for i, (t1, t2) in enumerate(zip(used_tuples, used_tuples[1:])):\n",
    "        graph.add_edge(t1, t2)\n",
    "    return graph\n",
    "        \n",
    "\n",
    "def constant_to_statistics(filename, k, n):\n",
    "    filepath = os.path.join('..', '..', 'data', 'mathematical_constants', filename)\n",
    "    text = file_to_text(filepath)\n",
    "    tuples = text_to_k_tuples(text, k)\n",
    "    g = first_n_tuples_to_digraph_only(tuples, n)\n",
    "    return nx.density(g), nx.reciprocity(g), nx.degree_pearson_correlation_coefficient(g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prefixes = ['pi', 'e', 'phi', 'sqrt2', 'sqrt3', 'log2', 'log10', 'gamma']\n",
    "prefixes += ['random{}'.format(i) for i in range(1,15+1)] \n",
    "\n",
    "data = []\n",
    "k = 3\n",
    "for n in [150, 200, 250, 300, 350]:\n",
    "    for pref in prefixes:\n",
    "        d, r, a = constant_to_statistics('{}_decimal_2m.txt'.format(pref), k, n)\n",
    "        data.append([pref, n, d, r, a])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parallel coordinate plot\n",
    "\n",
    "Usage guide: Select a range of 0.005 upwards for reciprocity and 0.0 upwards for assortativity to filter out all pseudo-random numbers but keep 5 constants of 8 total (sqrts seem to differ). This is a simple rule-based classification model which seems to be able to distinguish mathematical constants from pseudo-random numbers.\n",
    "\n",
    "Pseudo-random numbers were generated in a separate notebook with following code (and without selection of suitable cases):\n",
    "\n",
    "```python\n",
    "import random\n",
    "n = 2_000_000\n",
    "data = '{}.{}'.format(random.randint(0, 9), ''.join(str(random.randint(0, 9)) for _ in range(n)))\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_columns_first = list(zip(*data))\n",
    "\n",
    "up.javascript.parallel_coordinates_table(\n",
    "    data_columns_first,\n",
    "    name=['Prefix', 'n', 'Density', 'Reciprocity', 'Assortativity'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
