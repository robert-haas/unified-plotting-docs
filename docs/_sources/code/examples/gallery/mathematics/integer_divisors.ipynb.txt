{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Integer divisors as directed graph\n",
    "\n",
    "This Jupyter notebook is an example of plotting **graph data**. It demonstrates how natural numbers (positive integers) and their divisibility relations can be represented as a directed graph.\n",
    "\n",
    "## References\n",
    "\n",
    "- Wikipedia\n",
    "    - [Integer](https://en.wikipedia.org/wiki/Integer_(computer_science))\n",
    "    - [Divisor](https://en.wikipedia.org/wiki/Divisor)\n",
    "    - [Table of divisors](https://en.wikipedia.org/wiki/Table_of_divisors)\n",
    "\n",
    "\n",
    "## Data generation\n",
    "\n",
    "A network of integers and their divisibility relation can be created from following basic ideas\n",
    "\n",
    "- Each integer (up to some maximum) is represented by a node.\n",
    "- If an integer is divisible (without remainder) by another integer, an edge is drawn from the smaller to the larger integer to represent their divisibility relation. Prime numbers are only divisible by 1 and themselves, hence they have zero incoming edges if these trivial cases are excluded, i.e. using integers from 2 upwards and not testing if an integer can be divided by itself.\n",
    "- Different integers have quite different numbers of divisors. The number of divisors for a certain integer can be represented by node size (=more incoming edges means more divisors, shown by a larger node size) and additionally by node colors (a certain number of incoming edges is shown by a certain color)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "start = 2\n",
    "end = 100\n",
    "\n",
    "# Create the graph: assign edges between divisible integers\n",
    "graph = nx.DiGraph()\n",
    "for i in range(start, end+1):\n",
    "    graph.add_node(i)\n",
    "    for j in range(start, i):\n",
    "        if i % j == 0:\n",
    "            graph.add_edge(j, i)\n",
    "\n",
    "# Assign node properties: size, color, position\n",
    "degree_to_color_map = {0: '#df4828', 1: '#6059a0', 2: '#69b190', 3: '#ddaa3c', 4: '#a6be54'}\n",
    "for i in graph.nodes:\n",
    "    node = graph.nodes[i]\n",
    "    in_degree = graph.in_degree(i)\n",
    "    node['size'] = 10 + in_degree * 5\n",
    "    node['x'] = -2500 + i * 50\n",
    "    #node['y'] = -i ** 1.75\n",
    "    node['y'] = node['size'] / 2\n",
    "    node['color'] = degree_to_color_map.get(in_degree, 'black')\n",
    "\n",
    "# Assign edge properties: color (from source node)\n",
    "for e in graph.edges:\n",
    "    i, j = e\n",
    "    graph.edges[e]['color'] = graph.nodes[i]['color']\n",
    "\n",
    "graph.graph['edge_opacity'] = 0.6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.network_d3(graph, node_hover_neighborhood=True, edge_curvature=0.75, zoom_factor=0.15)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
