{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine learning datasets\n",
    "\n",
    "This Jupyter notebook is an example of plotting **vector data**. It visualizes well-known machine learning datasets in various ways. The appearance is suggestive for how classifiers could be built for these relatively simple data sets.\n",
    "\n",
    "## References\n",
    "\n",
    "- Wikipedia\n",
    "    - [Classic data sets](https://en.wikipedia.org/wiki/Data_set#Classic_data_sets)\n",
    "    - [Data sets for machine learning](https://en.wikipedia.org/wiki/List_of_datasets_for_machine_learning_research)\n",
    "- GitHub\n",
    "    - [Awesome Public Datasets](https://github.com/awesomedata/awesome-public-datasets)\n",
    "- Machine learning sites\n",
    "    - [Kaggle Datasets](https://www.kaggle.com/datasets)\n",
    "    - [KDnuggets](https://www.kdnuggets.com/datasets/index.html)\n",
    "    - [OpenML](https://www.openml.org/)\n",
    "    - [scikit-learn: Dataset loading utilities](http://scikit-learn.org/stable/datasets/index.html)\n",
    "    - [UCI Machine learning repository](http://archive.ics.uci.edu/ml/index.php)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Iris data set\n",
    "\n",
    "- Wikipedia: [Iris flower data set](https://en.wikipedia.org/wiki/Iris_flower_data_set)\n",
    "- Scikit-learn: [The Iris Dataset](http://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html)\n",
    "- UCI Machine learning repository: [Iris Data Set](https://archive.ics.uci.edu/ml/datasets/iris)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filepath = os.path.join('..', '..', 'data', 'tables', 'uci_iris.csv')\n",
    "data, name = up.utilities.io.read_dsv_file(filepath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sepal_length, sepal_width, petal_length, petal_width, species = data\n",
    "data = data[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def categorical_to_numerical(vec):\n",
    "    val_to_num = {val: num for num, val in enumerate(sorted(set(vec)))}\n",
    "    return [val_to_num[val] for val in vec]\n",
    "\n",
    "species_numerical = categorical_to_numerical(species)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scatter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.plotly.scatter(\n",
    "    x=sepal_length,\n",
    "    y=sepal_width,\n",
    "    x_title='sepal length',\n",
    "    y_title='sepal width',\n",
    "    color=species_numerical,\n",
    "    colormap='Viridis',\n",
    "    show_colormap=False\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.plotly.scatter(\n",
    "    x=petal_length,\n",
    "    y=petal_width,\n",
    "    x_title='petal length',\n",
    "    y_title='petal width',\n",
    "    color=species_numerical,\n",
    "    colormap='Viridis',\n",
    "    show_colormap=False\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scatter 3D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.plotly.scatter_3d(\n",
    "    x=petal_length,\n",
    "    y=petal_width,\n",
    "    z=sepal_length,\n",
    "    x_title='petal length',\n",
    "    y_title='petal width',\n",
    "    z_title='sepal length',\n",
    "    color=species_numerical,\n",
    "    colormap='Viridis',\n",
    "    show_colormap=False,\n",
    "    show_stem_x=True,\n",
    "    show_stem_y=True,\n",
    "    show_stem_z=True,\n",
    "    show_stem_line=False,\n",
    "    stem_shift_factor=0.3,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scatter plot matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "up.plotly.scatter_matrix(\n",
    "    data=data,\n",
    "    name=name,\n",
    "    color=species_numerical,\n",
    "    colormap='Viridis',\n",
    "    marker_size=3,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parallel coordinates plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "up.plotly.parallel_coordinates(\n",
    "    data=data + [species_numerical],\n",
    "    name=name,\n",
    "    color=species_numerical,\n",
    "    colormap='Viridis',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Box and violin plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig1 = up.plotly.box(data, name, opacity=0.7, show_x_title=False, show_y_title=False)\n",
    "fig2 = up.plotly.violin(data, name, opacity=0.2, show_rug=False)\n",
    "\n",
    "fig1 + fig2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Density"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.plotly.density(data, name, show_x_title=False, show_y_title=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Wine data set\n",
    "\n",
    "- Scikit-learn: [load_wine()](http://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_wine.html)\n",
    "- UCI Machine learning repository: [Wine Data Set](https://archive.ics.uci.edu/ml/datasets/Wine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filepath = os.path.join('..', '..', 'data', 'tables', 'uci_wine.csv')\n",
    "\n",
    "data, name = up.utilities.io.read_dsv_file(filepath)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Box plot (logarithmic y axis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.plotly.box(\n",
    "    data,\n",
    "    name,\n",
    "    x_label_rotation=25,\n",
    "    y_axis_scale='log',\n",
    "    show_x_title=False,\n",
    "    show_y_title=False,\n",
    "    width_mm=250,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scatter plot matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.matplotlib.scatter_matrix(\n",
    "    data=data,\n",
    "    name=name,\n",
    "    color=list(data[0]),\n",
    "    colormap='Viridis',\n",
    "    show_upper=False,\n",
    "    width_mm=500,\n",
    "    height_mm=500,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parallel coordinates plot and linked table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.javascript.parallel_coordinates_table(\n",
    "    data=data,\n",
    "    name=name,\n",
    "    colormap='Viridis',\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
