{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deterministic finite state machines\n",
    "\n",
    "This Jupyter notebook is an example of plotting **graph data**. It provides a simple implementation of a finite state machine and visualizes its formal structure as network plot: States are represented as nodes, state transitions as edges, and symbols (read from the input string during a transition) as edge labels.\n",
    "\n",
    "## References\n",
    "\n",
    "- Wikipedia: [Deterministic finite automaton](https://en.wikipedia.org/wiki/Deterministic_finite_automaton)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unified_plotting as up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining a DFA class\n",
    "\n",
    "It comes with a plotting method that visualizes its structure in a common way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DeterministicFiniteAutomaton:\n",
    "    \"\"\"A simple data structure for a deterministic finite automaton (DFA)\"\"\"\n",
    "\n",
    "    def __init__(self, states, alphabet, transitions, start_state, accepting_states):\n",
    "        self.states = states\n",
    "        self.alphabet = alphabet\n",
    "        self.transitions = transitions\n",
    "        self.start_state = start_state\n",
    "        self.accepting_states = accepting_states\n",
    "\n",
    "    def accepts(self, string):\n",
    "        current_state = self.start_state\n",
    "        for symbol in string:\n",
    "            if symbol not in self.alphabet:\n",
    "                raise ValueError('String contains invalid symbol: '.format(symbol))\n",
    "            current_state = self.transitions[current_state][symbol]\n",
    "        if current_state in self.accepting_states:\n",
    "            return True\n",
    "        return False\n",
    "\n",
    "    def plot_structure(self):\n",
    "        # States as nodes\n",
    "        hidden_start_node = {'id': '__start', 'label': '', 'metadata': {'size': '0'}}\n",
    "        nodes = [hidden_start_node]\n",
    "        for state in self.states:\n",
    "            if state in self.accepting_states:\n",
    "                nodes.append({'id': state, 'label': state,\n",
    "                              'metadata': {'border_size': 1.5, 'border_color': 'black'}})\n",
    "            else:\n",
    "                nodes.append({'id': state, 'label': state})\n",
    "        # State transitions as edges\n",
    "        hidden_start_edge = {'source': '__start', 'target': self.start_state, 'label': ''}\n",
    "        edges = [hidden_start_edge]\n",
    "        for source, values in self.transitions.items():\n",
    "            for label, target in values.items():\n",
    "                edges.append({'source': source, 'target': target, 'label': label})\n",
    "        # Graph definition in JGF format\n",
    "        data_jgf = {\n",
    "            'graph': {\n",
    "                'directed': True,\n",
    "                'metadata': {\n",
    "                    'node_size': 20, 'node_color': 'green', 'node_label_color': 'green',\n",
    "                    'edge_label_size': 10, 'edge_label_color': 'blue'},\n",
    "                'nodes': nodes,\n",
    "                'edges': edges,\n",
    "            }\n",
    "        }\n",
    "        # Plotting\n",
    "        fig = up.javascript.network_d3(\n",
    "            data_jgf, node_label_data_source='label', edge_label_data_source='label',\n",
    "            show_edge_label=True, show_menu=False, zoom_factor=1.8, links_force_distance=90, )\n",
    "        return fig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating a DFA instance and plotting it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an instance of a certain DFA\n",
    "m1 = DeterministicFiniteAutomaton(\n",
    "    states={'q0', 'q1', 'q2', 'q3'},\n",
    "    alphabet={'0', '1'},\n",
    "    transitions={\n",
    "        'q0': {'0': 'q0', '1': 'q1'},\n",
    "        'q1': {'0': 'q0', '1': 'q2'},\n",
    "        'q2': {'0': 'q0', '1': 'q3'},\n",
    "        'q3': {'0': 'q0', '1': 'q3'}\n",
    "    },\n",
    "    start_state='q0',\n",
    "    accepting_states={'q3'}\n",
    ")\n",
    "\n",
    "# Use the DFA to test if certain strings are accepted (=part of the language defined by the DFA)\n",
    "print(m1.accepts('111'))     # True\n",
    "print(m1.accepts('010111'))  # True\n",
    "print(m1.accepts('101'))     # False\n",
    "print(m1.accepts('101110'))  # False\n",
    "\n",
    "# Plot the structure of the specified DFA\n",
    "m1.plot_structure()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
