{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Human interactome\n",
    "\n",
    "This Jupyter notebook is an example of plotting **graph data** and derived **vector data**. It visualizes protein-protein interactions (PPi) taken from the Human Reference Interactome (HuRI).\n",
    "\n",
    "\n",
    "## References\n",
    "\n",
    "- [Center for Cancer Systems Biology (CCSB)](https://www.dana-farber.org/research/departments-centers-and-labs/integrative-research-centers/center-for-cancer-systems-biology/)\n",
    "    - [The Human Reference Protein Interactome Mapping Project](http://www.interactome-atlas.org)\n",
    "        - [Download](http://www.interactome-atlas.org/download)\n",
    "          - [HuRI.tsv](http://www.interactome-atlas.org/data/HuRI.tsv) with 52569 interactions (Ensembl gene IDs)\n",
    "          - [HI-union.tsv](http://www.interactome-atlas.org/data/HI-union.tsv) with 64006 interactions\n",
    "          - [Preprint paper](https://www.biorxiv.org/content/10.1101/605451v2)\n",
    "            - \"The  dataset, versioned HI-III-19 (Human Interactome obtained from screening Space III, published in 2019), contains  52,569  verified  PPIs  involving  8,275  proteins  (Supplementary  Table  6).  Given  its systematic  nature,  completeness  and  scale,  we  consider  HI-III-19  to  be  the  first  draft  of  the Human Reference Interactome (**HuRI**).\"\n",
    "            - \"Combining  HuRI  with  all previously published systematic screening efforts at CCSB yields 64,006 binary PPIs involving 9,094 proteins (**HI-union**)\"\n",
    "- [EMBL-EBI](https://www.ebi.ac.uk)\n",
    "    - [Ensembl](http://www.ensembl.org): Ensembl is a genome browser for vertebrate genomes\n",
    "        - [About](http://www.ensembl.org/info/about/index.html): In order to improve consistency between the data provided by different genome browsers, Ensembl has entered into an agreement with UCSC and NCBI with regard to sequence identifiers  \n",
    "- [UniProt](https://www.uniprot.org)\n",
    "    - [About](https://www.uniprot.org/help/about): The Universal Protein Resource (UniProt) is a comprehensive resource for protein sequence and annotation data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import os\n",
    "from collections import OrderedDict\n",
    "\n",
    "import networkx as nx\n",
    "import unified_plotting as up\n",
    "\n",
    "import requests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load protein-protein interaction (PPi) data\n",
    "\n",
    "The data is given as table that contains (source, target) pairs, which is a simple edge list. Note that ``HI-union-minimal.tsv`` is a reduced version of ``HI-union.tsv`` that contains only the first two columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_csv_data(filepath, delimiter=','):\n",
    "    with open(filepath) as csv_file:\n",
    "        csv_reader = csv.reader(csv_file, delimiter=delimiter)\n",
    "        data = list(csv_reader)\n",
    "    return data\n",
    "\n",
    "\n",
    "filepath = os.path.join('..', '..', 'data', 'networks', 'HuRI.tsv')\n",
    "data_huri = load_csv_data(filepath, delimiter='\\t')\n",
    "\n",
    "filepath = os.path.join('..', '..', 'data', 'networks', 'HI-union-minimal.tsv')\n",
    "data_hi_union = load_csv_data(filepath, delimiter='\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create PPi network as NetworkX graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def construct_graph(data, name):\n",
    "    graph = nx.Graph()\n",
    "    for source, target in data:\n",
    "        graph.add_edge(source, target)\n",
    "\n",
    "    uniprot_template = (\n",
    "        'Degree: {degree}<br>'\n",
    "        'Uniprot: <a href=\"https://www.uniprot.org/uniprot/{id}\" target=\"_blank\">{id}</a>')\n",
    "    ensembl_template = (\n",
    "        'Degree: {degree}<br>'\n",
    "        'Ensembl: <a href=\"https://www.ensembl.org/Homo_sapiens/Gene/Summary?g={id}\" target=\"_blank\">{id}</a><br>'\n",
    "        'NCBI Gene: <a href=\"https://www.ncbi.nlm.nih.gov/gene/?term={id}\" target=\"_blank\">{id}</a>')\n",
    "\n",
    "    for node_id in graph.nodes:\n",
    "        node = graph.nodes[node_id]\n",
    "        template = ensembl_template if node_id.lower().startswith('ens') else uniprot_template\n",
    "        node['hover'] = template.format(id=node_id, degree=graph.degree[node_id])\n",
    "        node['click'] = '$hover'\n",
    "    print('Protein-protein interaction network \"{}\"'.format(name))\n",
    "    print('- Number of nodes:', len(graph.nodes))\n",
    "    print('- Number of edges:', len(graph.edges))\n",
    "    print()\n",
    "    return graph\n",
    "\n",
    "\n",
    "graph_huri = construct_graph(data_huri, 'HuRI')\n",
    "graph_hi_union = construct_graph(data_hi_union, 'HI-union')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot filtered versions of the large graph\n",
    "\n",
    "### Filter 1: Egocentric network (=neighborhood of a selected node)\n",
    "\n",
    "- https://www.sciencedirect.com/topics/computer-science/egocentric-network\n",
    "\n",
    "Focus on an actor (\"ego\") and show all edges to his direct neighbors (\"alters\") and between them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def list_edges_containing_a_node(data, beginning_node_id):\n",
    "    for source, target in data:\n",
    "        for node_id in [source, target]:\n",
    "            if node_id.startswith(beginning_node_id):\n",
    "                print(source, target)\n",
    "\n",
    "list_edges_containing_a_node(data_huri, 'ENSG00000136997')\n",
    "print()\n",
    "list_edges_containing_a_node(data_hi_union, 'P01106')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_egocentric_graph(graph, ego_node_id, radius=1):\n",
    "    ego_graph = nx.ego_graph(graph, ego_node_id, radius=radius)\n",
    "    ego_node = ego_graph.nodes[ego_node_id]\n",
    "    ego_node['color'] = 'red'\n",
    "    ego_node['label_color'] = 'red'\n",
    "    pos_counter = {i: 0 for i in range(radius+1)}\n",
    "    for node_id in ego_graph.nodes:\n",
    "        node = ego_graph.nodes[node_id]\n",
    "        distance = len(nx.shortest_path(graph, ego_node_id, node_id)) - 1\n",
    "        node['x'] = distance * 120 - 300\n",
    "        node['y'] = pos_counter[distance] * 40 - 300\n",
    "        node['size'] = 10 + graph.degree[node_id] / 10\n",
    "        pos_counter[distance] += 1\n",
    "        if distance == 1:\n",
    "            node['color'] = 'blue'\n",
    "        elif distance == 2:\n",
    "            node['color'] = 'green'\n",
    "    print('Egocentric graph')\n",
    "    print('- Number of nodes:', len(ego_graph.nodes))\n",
    "    print('- Number of edges:', len(ego_graph.edges))\n",
    "    return ego_graph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1) HuRI data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Examples of proteins in HuRI data (ensembl identifiers)\n",
    "#  Myc: ENSG00000136997\n",
    "#  Max: ENSG00000125952\n",
    "egocentric_graph = create_egocentric_graph(graph_huri, 'ENSG00000136997', radius=2)\n",
    "\n",
    "up.javascript.network_d3(\n",
    "    egocentric_graph, edge_curvature=0, zoom_factor=0.5, node_hover_neighborhood=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2) HI-union data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Examples of proteins in HI-union data (uniprot identifiers)\n",
    "#  Myc: 'P01106-1'\n",
    "#  Max: 'P61244-1'\n",
    "egocentric_graph = create_egocentric_graph(graph_hi_union, 'P01106-1', radius=2)\n",
    "\n",
    "up.javascript.network_d3(\n",
    "    egocentric_graph, edge_curvature=0, zoom_factor=0.5, node_hover_neighborhood=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Filter 2: Only well-connected nodes with degree >= n \n",
    "\n",
    "Show only proteins that have interactions with at least n other proteins."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_high_degree_graph(graph, n):\n",
    "    filtered_graph = graph.copy()\n",
    "\n",
    "    # Step 1\n",
    "    to_remove = [node for node, degree in graph.degree() if degree < n]\n",
    "    filtered_graph.remove_nodes_from(to_remove)\n",
    "\n",
    "    # Step 2\n",
    "    to_remove = [node for node, degree in filtered_graph.degree() if degree < 1]\n",
    "    filtered_graph.remove_nodes_from(to_remove)\n",
    "    \n",
    "    print('Filtered graph')\n",
    "    print('- Number of nodes:', len(filtered_graph.nodes))\n",
    "    print('- Number of edges:', len(filtered_graph.edges))\n",
    "    return filtered_graph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1) HuRI data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "high_degree_graph = create_high_degree_graph(graph_huri, n=175)\n",
    "\n",
    "up.javascript.network_d3(high_degree_graph, zoom_factor=0.5, node_hover_neighborhood=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2) HI-union data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "high_degree_graph = create_high_degree_graph(graph_hi_union, n=175)\n",
    "\n",
    "up.javascript.network_d3(high_degree_graph, zoom_factor=0.5, node_hover_neighborhood=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot graph statistics\n",
    "\n",
    "### 1) Distribution of node degrees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "def get_degree_sequence(graph):\n",
    "    return [degree for node_id, degree in graph.degree()]\n",
    "\n",
    "\n",
    "def get_degree_counts(graph):\n",
    "    degree_counts = dict()\n",
    "    for node_id, degree in graph.degree:\n",
    "        if degree not in degree_counts:\n",
    "            degree_counts[degree] = 1\n",
    "        else:\n",
    "            degree_counts[degree] += 1\n",
    "    return degree_counts\n",
    "\n",
    "\n",
    "def plot_degree_distributions(graph1, name1, graph2, name2):\n",
    "    # Plot 1: bar chart of degree vs. count\n",
    "    dc1 = get_degree_counts(graph1)\n",
    "    dc2 = get_degree_counts(graph2)\n",
    "    n = max(max(dc1), max(dc2))\n",
    "    s1 = [dc1.get(degree, 0) for degree in range(n+1)]\n",
    "    s2 = [dc2.get(degree, 0) for degree in range(n+1)]\n",
    "    fig1 = up.plotly.bar(\n",
    "        x=[list(range(n+1)), list(range(n+1))],\n",
    "        y=[s1, s2],\n",
    "        name=[name1, name2],\n",
    "        show_title=True, \n",
    "        title='Degree distributions',\n",
    "        show_x_title=False,\n",
    "        y_title='Count',\n",
    "        x_axis_range=[0, n+1],\n",
    "        x_tick_position=list(range(0, n+1, 100)),\n",
    "        y_axis_scale='log',\n",
    "        width_mm=250,\n",
    "        height_mm=100,\n",
    "        margin_bottom_mm=0,\n",
    "    )\n",
    "    fig2 = up.plotly.scatter(\n",
    "        x=[list(range(n+1)), list(range(n+1))],\n",
    "        y=[s1, s2],\n",
    "        name=[name1, name2],\n",
    "        marker_size=2,\n",
    "    )\n",
    "    fig = fig1 + fig2\n",
    "    fig.display(inline=True)\n",
    "\n",
    "    # Plot 2: histogram\n",
    "    ds1 = get_degree_sequence(graph1)\n",
    "    ds2 = get_degree_sequence(graph2)\n",
    "    fig = up.plotly.histogram(\n",
    "        data=[ds1, ds2],\n",
    "        name=[name1, name2],\n",
    "        show_x_title=False,\n",
    "        y_title='Percentage',\n",
    "        show_legend=False,\n",
    "        bar_mode='overlay',\n",
    "        bin_x_start=0,\n",
    "        bin_x_stop=n+1,\n",
    "        bin_x_number=71,\n",
    "        normalization='percent',\n",
    "        x_axis_range=[0, n+1],\n",
    "        x_tick_position=list(range(0, n+1, 100)),\n",
    "        y_axis_scale='log',\n",
    "        opacity=0.5,\n",
    "        width_mm=250,\n",
    "        height_mm=50,\n",
    "        margin_top_mm=0,\n",
    "        margin_bottom_mm=0,\n",
    "    )\n",
    "    fig.display(inline=True)\n",
    "    \n",
    "    # Plot 3: box and violin chart of degree distribution\n",
    "    fig1 = up.plotly.box(\n",
    "        data=[ds1, ds2],\n",
    "        name=[name1, name2],\n",
    "        x_title='Degree',\n",
    "        y_title='Statistics',\n",
    "        x_axis_range=[0, n+1],\n",
    "        x_tick_position=list(range(0, n+1, 100)),\n",
    "        y_label_rotation=0,\n",
    "        show_rug=False,\n",
    "        box_width=0.3,\n",
    "        orientation='horizontal',\n",
    "        width_mm=250,\n",
    "        height_mm=50,\n",
    "        margin_top_mm=0,\n",
    "    )\n",
    "    fig2 = up.plotly.violin(\n",
    "        data=[ds1, ds2],\n",
    "        name=[name1, name2],\n",
    "        opacity=0.5,\n",
    "        show_rug=False,\n",
    "        violin_width=1,\n",
    "        orientation='horizontal',\n",
    "        side='positive',\n",
    "    )\n",
    "    fig = fig1 + fig2\n",
    "    fig.display(inline=True)\n",
    "\n",
    "\n",
    "plot_degree_distributions(graph_huri, 'HuRI', graph_hi_union, 'HIU')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2) Comparison of centrality measures\n",
    "\n",
    "A centrality value, which indicates the importance of a node as seen from a certain perspective, can be calcualted for each node in the network. This gives a list of numbers, one for each node. Different centrality measures give multiple such lists, which together form a tabular dataset that can be plotted in the same ways as other vector data. Such visualizations allow to compare different centrality values assigned to each node, showing their importance from multiple perspectives."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_centralities(graph, node_ids, label):\n",
    "    data, name = [], []\n",
    "    centrality_method_names = [\n",
    "        'degree_centrality',\n",
    "        #'closeness_centrality',  # slow\n",
    "        #'betweenness_centrality',  # slow\n",
    "        'eigenvector_centrality_numpy',\n",
    "        'katz_centrality_numpy',\n",
    "        #'pagerank_numpy',  # slow\n",
    "    ]\n",
    "    for cmn in centrality_method_names:\n",
    "        centrality_function = getattr(nx, cmn)\n",
    "        node_dict = centrality_function(graph)\n",
    "        data.append([node_dict[node_id] for node_id in node_ids])\n",
    "        if cmn.endswith('_numpy'):\n",
    "            cmn = cmn[:-len('_numpy')]\n",
    "        name.append('{}_{}'.format(label, cmn))\n",
    "    return data, name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "node_ids_huri = list(graph_huri.nodes)\n",
    "centrality_data_huri, name_huri = calc_centralities(graph_huri, node_ids_huri, 'HuRI')\n",
    "\n",
    "up.javascript.parallel_coordinates_table(\n",
    "    data=[node_ids_huri] + centrality_data_huri,\n",
    "    name=['Node id'] + name_huri,\n",
    "    column_hidden=['Node id'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "node_ids_hi_union = list(graph_hi_union.nodes)\n",
    "centrality_data_hi_union, name_hi_union = calc_centralities(graph_hi_union, node_ids_hi_union, 'HI-union')\n",
    "\n",
    "up.javascript.parallel_coordinates_table(\n",
    "    data=[node_ids_hi_union] + centrality_data_hi_union,\n",
    "    name=['Node id'] + name_hi_union,\n",
    "    column_hidden=['Node id'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "up.plotly.box(\n",
    "    data=centrality_data_huri + centrality_data_hi_union,\n",
    "    name=name_huri+name_hi_union,\n",
    "    show_rug=False,\n",
    "    x_label_rotation=20,\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
