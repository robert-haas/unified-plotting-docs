{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SIR model for infectious diseases\n",
    "\n",
    "This Jupyter notebook is an example of plotting **vector data**. It visualizes and compares different solutions of a simple infections disease model, usually referred to as \"SIR model\" since it divides a population into three subgroups - susceptible (S), infectious (I) and recovered (R) individuals - and predicts the number of each of these over time.\n",
    "\n",
    "The model comes with a few parameters, one of which is called beta. This parameter can be set to different values in order to simulate the reduction of contacts between individuals. The result is that the number of infectious (I) individuals rises slower and to a lower maximum, possibly a source of inspiration for the slogan of \"flattening the curve\" during the coronavirus pandemic. More precisely, beta is according to Wikipedia the \"average number of contacts per person per time, multiplied by the probability of disease transmission in a contact between a susceptible and an infectious subject\". Hence a lower beta means less disease transmission from infectious (I) to susceptible (S) individuals in a certain amount of time. So what effect does it have on disease dynamics if beta is halved or reduced to a quarter of its original value? Let's see.\n",
    "\n",
    "## References\n",
    "\n",
    "- Wikipedia\n",
    "    - [Compartmental models in epidemiology](https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology)\n",
    "    - [SIR-Modell (de)](https://de.wikipedia.org/wiki/SIR-Modell)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from functools import partial\n",
    "\n",
    "import unified_plotting as up\n",
    "from unified_plotting.utilities import ode_solver"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sir_model(t, state_vector, beta, gamma, nu, mu):\n",
    "    S, I, R = state_vector\n",
    "    N = S + I + R\n",
    "\n",
    "    dS = nu * N - beta * S * I / N - mu * S\n",
    "    dI = beta * S * I / N - gamma * I - mu * I\n",
    "    dR = gamma * I - mu * R\n",
    "    \n",
    "    state_vector_changes = [dS, dI, dR]\n",
    "    return state_vector_changes\n",
    "\n",
    "\n",
    "def calc_sir_model(t_start=0, t_end=150, t_step=0.02,\n",
    "                   s_start=997, i_start=3, r_start=0,\n",
    "                   beta=0.5, gamma=0.04, mu=0.0, nu=0.0):\n",
    "    state_start = [s_start, i_start, r_start]\n",
    "    parameterized_sir_model = partial(sir_model, beta=beta, gamma=gamma, mu=mu, nu=nu)\n",
    "    t_series, Y_series = ode_solver.scipy(parameterized_sir_model, state_start, t_start, t_end, t_step)\n",
    "    S_series, I_series, R_series = Y_series\n",
    "    N_series = [s+i+r for s, i, r in zip(S_series, I_series, R_series)]\n",
    "    return t_series, S_series, I_series, R_series, N_series\n",
    "\n",
    "\n",
    "def plot_sir_models(t1, S1, I1, R1, N1, t2, S2, I2, R2, N2, t3, S3, I3, R3, N3):\n",
    "    fig = up.plotly.scatter(\n",
    "        x=[t1, t1, t1, t1, t2, t2, t2, t2, t3, t3, t3, t3],\n",
    "        y=[S1, I1, R1, N1, S2, I2, R2, N2, S3, I3, R3, N3],\n",
    "        name=['Susceptibles (S)', 'Infected (I)', 'Removed (R)', 'All individuals']*3,\n",
    "        x_title='Time',\n",
    "        y_title='Number of individuals',\n",
    "        show_marker=False,\n",
    "        show_line=True,\n",
    "        show_y_grid=True,\n",
    "        line_width=[2]*4 + [1]*4 + [0.5]*4,\n",
    "        line_style=['-']*4 + ['--']*4 + ['.']*4,\n",
    "        color=['#6059a0', '#df4828', '#69b190', '#ddaa3c'],\n",
    "        legend_position_vertical='center',\n",
    "        width_mm=220,\n",
    "        height_mm=150,\n",
    "        legend_size=6,\n",
    "        # y_axis_scale='log',\n",
    "    )\n",
    "    fig.display(inline=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "beta1 = 0.5\n",
    "beta2 = beta1 / 2.0\n",
    "beta3 = beta2 / 2.0\n",
    "\n",
    "t1, S1, I1, R1, N1 = calc_sir_model(s_start=997, i_start=3, r_start=0, beta=beta1, gamma=0.04)\n",
    "t2, S2, I2, R2, N2 = calc_sir_model(s_start=997, i_start=3, r_start=0, beta=beta2, gamma=0.04)\n",
    "t3, S3, I3, R3, N3 = calc_sir_model(s_start=997, i_start=3, r_start=0, beta=beta3, gamma=0.04)\n",
    "\n",
    "plot_sir_models(\n",
    "    t1, S1, I1, R1, N1,\n",
    "    t2, S2, I2, R2, N2,\n",
    "    t3, S3, I3, R3, N3,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Maximum number of infected individuals for each beta value:')\n",
    "for beta, I in zip([beta1, beta2, beta3], [I1, I2, I3]):\n",
    "    print(' beta = {:.3f} ... I_max = {:.0f} individuals'.format(beta, max(I)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
